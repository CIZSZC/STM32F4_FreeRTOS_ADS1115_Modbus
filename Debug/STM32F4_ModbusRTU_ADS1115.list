
STM32F4_ModbusRTU_ADS1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008db0  08008db0  00018db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed8  08008ed8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee0  08008ee0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004428  20000078  08008f60  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  08008f60  000244a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017530  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003165  00000000  00000000  000375d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003a740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0003bc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023521  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001030d  00000000  00000000  00060499  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5640  00000000  00000000  000707a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b8c  00000000  00000000  00145e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d94 	.word	0x08008d94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008d94 	.word	0x08008d94

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b972 	b.w	8000de4 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9e08      	ldr	r6, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4688      	mov	r8, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d14b      	bne.n	8000bbe <__udivmoddi4+0xa6>
 8000b26:	428a      	cmp	r2, r1
 8000b28:	4615      	mov	r5, r2
 8000b2a:	d967      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	b14a      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b32:	f1c2 0720 	rsb	r7, r2, #32
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b3e:	4095      	lsls	r5, r2
 8000b40:	ea47 0803 	orr.w	r8, r7, r3
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b50:	fa1f fc85 	uxth.w	ip, r5
 8000b54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18eb      	adds	r3, r5, r3
 8000b66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6a:	f080 811b 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8118 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000b74:	3f02      	subs	r7, #2
 8000b76:	442b      	add	r3, r5
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x290>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x290>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	442c      	add	r4, r5
 8000ba4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba8:	eba4 040c 	sub.w	r4, r4, ip
 8000bac:	2700      	movs	r7, #0
 8000bae:	b11e      	cbz	r6, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb8:	4639      	mov	r1, r7
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xbe>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f000 80eb 	beq.w	8000d9e <__udivmoddi4+0x286>
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e9c6 0100 	strd	r0, r1, [r6]
 8000bce:	4638      	mov	r0, r7
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f783 	clz	r7, r3
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d147      	bne.n	8000c6e <__udivmoddi4+0x156>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd0>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fa 	bhi.w	8000ddc <__udivmoddi4+0x2c4>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xe8>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 808f 	bne.w	8000d28 <__udivmoddi4+0x210>
 8000c0a:	1b49      	subs	r1, r1, r5
 8000c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c10:	fa1f f885 	uxth.w	r8, r5
 8000c14:	2701      	movs	r7, #1
 8000c16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c24:	fb08 f10c 	mul.w	r1, r8, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x124>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x122>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c3a:	4684      	mov	ip, r0
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	b2a3      	uxth	r3, r4
 8000c40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c4c:	fb08 f800 	mul.w	r8, r8, r0
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x14c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x14a>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f200 80b6 	bhi.w	8000dce <__udivmoddi4+0x2b6>
 8000c62:	4618      	mov	r0, r3
 8000c64:	eba4 0408 	sub.w	r4, r4, r8
 8000c68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6c:	e79f      	b.n	8000bae <__udivmoddi4+0x96>
 8000c6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c72:	40bb      	lsls	r3, r7
 8000c74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c8c:	4325      	orrs	r5, r4
 8000c8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c92:	0c2c      	lsrs	r4, r5, #16
 8000c94:	fb08 3319 	mls	r3, r8, r9, r3
 8000c98:	fa1f fa8e 	uxth.w	sl, lr
 8000c9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	fa02 f207 	lsl.w	r2, r2, r7
 8000caa:	fa00 f107 	lsl.w	r1, r0, r7
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b0>
 8000cb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb8:	f080 8087 	bcs.w	8000dca <__udivmoddi4+0x2b2>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f240 8084 	bls.w	8000dca <__udivmoddi4+0x2b2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	4473      	add	r3, lr
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	b2ad      	uxth	r5, r5
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cdc:	45a2      	cmp	sl, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1da>
 8000ce0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce8:	d26b      	bcs.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d969      	bls.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4474      	add	r4, lr
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfa:	eba4 040a 	sub.w	r4, r4, sl
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c2      	mov	sl, r8
 8000d02:	464b      	mov	r3, r9
 8000d04:	d354      	bcc.n	8000db0 <__udivmoddi4+0x298>
 8000d06:	d051      	beq.n	8000dac <__udivmoddi4+0x294>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d069      	beq.n	8000de0 <__udivmoddi4+0x2c8>
 8000d0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d10:	eb64 0403 	sbc.w	r4, r4, r3
 8000d14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d18:	40fd      	lsrs	r5, r7
 8000d1a:	40fc      	lsrs	r4, r7
 8000d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d20:	e9c6 5400 	strd	r5, r4, [r6]
 8000d24:	2700      	movs	r7, #0
 8000d26:	e747      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000d28:	f1c2 0320 	rsb	r3, r2, #32
 8000d2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d30:	4095      	lsls	r5, r2
 8000d32:	fa01 f002 	lsl.w	r0, r1, r2
 8000d36:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	4338      	orrs	r0, r7
 8000d40:	0c01      	lsrs	r1, r0, #16
 8000d42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d46:	fa1f f885 	uxth.w	r8, r5
 8000d4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb07 f308 	mul.w	r3, r7, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x256>
 8000d5e:	1869      	adds	r1, r5, r1
 8000d60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d64:	d22f      	bcs.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d92d      	bls.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d6a:	3f02      	subs	r7, #2
 8000d6c:	4429      	add	r1, r5
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	b281      	uxth	r1, r0
 8000d72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb00 f308 	mul.w	r3, r0, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x27e>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8c:	d217      	bcs.n	8000dbe <__udivmoddi4+0x2a6>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d915      	bls.n	8000dbe <__udivmoddi4+0x2a6>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d9c:	e73b      	b.n	8000c16 <__udivmoddi4+0xfe>
 8000d9e:	4637      	mov	r7, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e709      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da4:	4607      	mov	r7, r0
 8000da6:	e6e7      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000dac:	4541      	cmp	r1, r8
 8000dae:	d2ab      	bcs.n	8000d08 <__udivmoddi4+0x1f0>
 8000db0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db4:	eb69 020e 	sbc.w	r2, r9, lr
 8000db8:	3801      	subs	r0, #1
 8000dba:	4613      	mov	r3, r2
 8000dbc:	e7a4      	b.n	8000d08 <__udivmoddi4+0x1f0>
 8000dbe:	4660      	mov	r0, ip
 8000dc0:	e7e9      	b.n	8000d96 <__udivmoddi4+0x27e>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	e795      	b.n	8000cf2 <__udivmoddi4+0x1da>
 8000dc6:	4667      	mov	r7, ip
 8000dc8:	e7d1      	b.n	8000d6e <__udivmoddi4+0x256>
 8000dca:	4681      	mov	r9, r0
 8000dcc:	e77c      	b.n	8000cc8 <__udivmoddi4+0x1b0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	442c      	add	r4, r5
 8000dd2:	e747      	b.n	8000c64 <__udivmoddi4+0x14c>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	442b      	add	r3, r5
 8000dda:	e72f      	b.n	8000c3c <__udivmoddi4+0x124>
 8000ddc:	4638      	mov	r0, r7
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xda>
 8000de0:	4637      	mov	r7, r6
 8000de2:	e6e9      	b.n	8000bb8 <__udivmoddi4+0xa0>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <delay_init+0x44>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <delay_init+0x44>)
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <delay_init+0x48>)
 8000e06:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <delay_init+0x48>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0152      	lsls	r2, r2, #5
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <delay_init+0x4c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	20000094 	.word	0x20000094
 8000e34:	20000096 	.word	0x20000096

08000e38 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <delay_ms+0x60>)
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <delay_ms+0x64>)
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <delay_ms+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <delay_ms+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <delay_ms+0x64>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <delay_ms+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <delay_ms+0x46>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f2      	beq.n	8000e64 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <delay_ms+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <delay_ms+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000096 	.word	0x20000096
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000098 	.word	0x20000098
 8000ed0:	200000ec 	.word	0x200000ec
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 f819 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8fb 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f9cf 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 f9ad 	bl	8001248 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000eee:	f000 f981 	bl	80011f4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f951 	bl	8001198 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(16);
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	f7ff ff76 	bl	8000de8 <delay_init>

  //TODO: read DIP switch
  SwitchValue[0] = HAL_GPIO_ReadPin(GPIOE, Switch1_Pin);
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	486b      	ldr	r0, [pc, #428]	; (80010b0 <main+0x1d8>)
 8000f02:	f001 fe77 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <main+0x1dc>)
 8000f0c:	701a      	strb	r2, [r3, #0]
  SwitchValue[1] = HAL_GPIO_ReadPin(GPIOE, Switch2_Pin);
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	4867      	ldr	r0, [pc, #412]	; (80010b0 <main+0x1d8>)
 8000f14:	f001 fe6e 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b65      	ldr	r3, [pc, #404]	; (80010b4 <main+0x1dc>)
 8000f1e:	705a      	strb	r2, [r3, #1]
  SwitchValue[2] = HAL_GPIO_ReadPin(GPIOE, Switch3_Pin);
 8000f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f24:	4862      	ldr	r0, [pc, #392]	; (80010b0 <main+0x1d8>)
 8000f26:	f001 fe65 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <main+0x1dc>)
 8000f30:	709a      	strb	r2, [r3, #2]
  SwitchValue[3] = HAL_GPIO_ReadPin(GPIOE, Switch4_Pin);
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	485e      	ldr	r0, [pc, #376]	; (80010b0 <main+0x1d8>)
 8000f38:	f001 fe5c 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <main+0x1dc>)
 8000f42:	70da      	strb	r2, [r3, #3]
  SwitchValue[4] = HAL_GPIO_ReadPin(GPIOE, Switch5_Pin);
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	4859      	ldr	r0, [pc, #356]	; (80010b0 <main+0x1d8>)
 8000f4a:	f001 fe53 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <main+0x1dc>)
 8000f54:	711a      	strb	r2, [r3, #4]
  SwitchValue[5] = HAL_GPIO_ReadPin(GPIOE, Switch6_Pin);
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	4855      	ldr	r0, [pc, #340]	; (80010b0 <main+0x1d8>)
 8000f5c:	f001 fe4a 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <main+0x1dc>)
 8000f66:	715a      	strb	r2, [r3, #5]
  SwitchValue[6] = HAL_GPIO_ReadPin(GPIOE, Switch7_Pin);
 8000f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6c:	4850      	ldr	r0, [pc, #320]	; (80010b0 <main+0x1d8>)
 8000f6e:	f001 fe41 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <main+0x1dc>)
 8000f78:	719a      	strb	r2, [r3, #6]
  SwitchValue[7] = HAL_GPIO_ReadPin(GPIOE, Switch8_Pin);
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	484c      	ldr	r0, [pc, #304]	; (80010b0 <main+0x1d8>)
 8000f80:	f001 fe38 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <main+0x1dc>)
 8000f8a:	71da      	strb	r2, [r3, #7]


  //TODO: converter DIP switch to modbus slave using binary
  for(uint8_t i = 0; i <8; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000f92:	e039      	b.n	8001008 <main+0x130>
  {
	  slaveID += SwitchValue[i] * pow(2,i);
 8000f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f98:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <main+0x1dc>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa69 	bl	8000474 <__aeabi_i2d>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa52 	bl	8000454 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	ec43 2b11 	vmov	d1, r2, r3
 8000fb8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80010a8 <main+0x1d0>
 8000fbc:	f006 fe94 	bl	8007ce8 <pow>
 8000fc0:	ec53 2b10 	vmov	r2, r3, d0
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff fabe 	bl	8000548 <__aeabi_dmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	4625      	mov	r5, r4
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <main+0x1e0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa4b 	bl	8000474 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	f7ff f8f9 	bl	80001dc <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fd59 	bl	8000aa8 <__aeabi_d2uiz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <main+0x1e0>)
 8000ffc:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i <8; i++)
 8000ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001002:	3301      	adds	r3, #1
 8001004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800100c:	2b07      	cmp	r3, #7
 800100e:	d9c1      	bls.n	8000f94 <main+0xbc>
  }

  delay_ms(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f7ff ff11 	bl	8000e38 <delay_ms>

 //ADCstatus =  HAL_ADC_Stop_DMA(&hadc1);

  HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 8001016:	2208      	movs	r2, #8
 8001018:	4928      	ldr	r1, [pc, #160]	; (80010bc <main+0x1e4>)
 800101a:	4829      	ldr	r0, [pc, #164]	; (80010c0 <main+0x1e8>)
 800101c:	f003 fd1c 	bl	8004a58 <HAL_UART_Receive_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ModbusTransTask */
  osThreadDef(ModbusTransTask, ModbusTransThread, osPriorityNormal, 0, 128);
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <main+0x1ec>)
 8001022:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTransTaskHandle = osThreadCreate(osThread(ModbusTransTask), NULL);
 8001034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fc65 	bl	800590a <osThreadCreate>
 8001040:	4602      	mov	r2, r0
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <main+0x1f0>)
 8001044:	601a      	str	r2, [r3, #0]

  /* definition and creation of ModbusSetTask */
  osThreadDef(ModbusSetTask, ModbusSetThread, osPriorityNormal, 0, 128);
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <main+0x1f4>)
 8001048:	f107 041c 	add.w	r4, r7, #28
 800104c:	461d      	mov	r5, r3
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusSetTaskHandle = osThreadCreate(osThread(ModbusSetTask), NULL);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fc52 	bl	800590a <osThreadCreate>
 8001066:	4602      	mov	r2, r0
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <main+0x1f8>)
 800106a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ADS1115Task */
  osThreadDef(ADS1115Task, ADS1115Thread, osPriorityNormal, 0, 128);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <main+0x1fc>)
 800106e:	463c      	mov	r4, r7
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADS1115TaskHandle = osThreadCreate(osThread(ADS1115Task), NULL);
 800107e:	463b      	mov	r3, r7
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fc41 	bl	800590a <osThreadCreate>
 8001088:	4602      	mov	r2, r0
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <main+0x200>)
 800108c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ModBus_Init();
 800108e:	f000 fa87 	bl	80015a0 <ModBus_Init>
  ModBus_SetAddress(slaveID);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <main+0x1e0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fae2 	bl	8001660 <ModBus_SetAddress>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800109c:	f004 fc2e 	bl	80058fc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x1c8>
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40000000 	.word	0x40000000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20004170 	.word	0x20004170
 80010b8:	200002ec 	.word	0x200002ec
 80010bc:	20004178 	.word	0x20004178
 80010c0:	2000412c 	.word	0x2000412c
 80010c4:	08008dc0 	.word	0x08008dc0
 80010c8:	200040f0 	.word	0x200040f0
 80010cc:	08008dec 	.word	0x08008dec
 80010d0:	200040f4 	.word	0x200040f4
 80010d4:	08008e14 	.word	0x08008e14
 80010d8:	2000416c 	.word	0x2000416c

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fdf3 	bl	8007cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <SystemClock_Config+0xb4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <SystemClock_Config+0xb4>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <SystemClock_Config+0xb4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <SystemClock_Config+0xb8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <SystemClock_Config+0xb8>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <SystemClock_Config+0xb8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fcf1 	bl	8003b34 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001158:	f000 f9e2 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f002 ff4c 	bl	8004014 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001182:	f000 f9cd 	bl	8001520 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f001 fd25 	bl	8002c24 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 f99e 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000409c 	.word	0x2000409c
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART6_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART6_UART_Init+0x4c>)
 800122c:	f003 fb2e 	bl	800488c <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f973 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000412c 	.word	0x2000412c
 8001244:	40011400 	.word	0x40011400

08001248 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_DMA_Init+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <MX_DMA_Init+0x3c>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_DMA_Init+0x3c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	2039      	movs	r0, #57	; 0x39
 8001270:	f000 ff6c 	bl	800214c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001274:	2039      	movs	r0, #57	; 0x39
 8001276:	f000 ff85 	bl	8002184 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_GPIO_Init+0x8c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin 
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin 
 80012f2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80012f6:	60fb      	str	r3, [r7, #12]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0x90>)
 8001308:	f001 fada 	bl	80028c0 <HAL_GPIO_Init>

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(huart);
 /* NOTE: This function should not be modified, when the callback is needed,
          the HAL_UART_RxCpltCallback could be implemented in the user file
  */
 HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 8001324:	2208      	movs	r2, #8
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <HAL_UART_RxCpltCallback+0x40>)
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <HAL_UART_RxCpltCallback+0x44>)
 800132a:	f003 fb95 	bl	8004a58 <HAL_UART_Receive_DMA>
	for(int i=0;i<8;i++)
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e00c      	b.n	800134e <HAL_UART_RxCpltCallback+0x32>
	{
		 osMessagePut(ModBusInHandle,rxbuffer[i],0);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_UART_RxCpltCallback+0x48>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_UART_RxCpltCallback+0x40>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	f004 fb56 	bl	80059f4 <osMessagePut>
	for(int i=0;i<8;i++)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b07      	cmp	r3, #7
 8001352:	ddef      	ble.n	8001334 <HAL_UART_RxCpltCallback+0x18>
	}
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20004178 	.word	0x20004178
 8001360:	2000412c 	.word	0x2000412c
 8001364:	20004354 	.word	0x20004354

08001368 <ModbusTransThread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ModbusTransThread */
void ModbusTransThread(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0c6      	sub	sp, #280	; 0x118
 800136c:	af00      	add	r7, sp, #0
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  uint8_t buf[256]; // buffer, where we collect output data
	  uint8_t c = 0; // counter for buffer fill
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  uint8_t count = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  /* Infinite loop */
  for(;;)
  {
	 // ModBus_SetRegister(0,5+1);

    osEvent evt = osMessageGet(ModBusOutHandle,200); // wait here 200 tick
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <ModbusTransThread+0x84>)
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	22c8      	movs	r2, #200	; 0xc8
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fb73 	bl	8005a74 <osMessageGet>
    if (evt.status == osEventMessage)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b10      	cmp	r3, #16
 8001396:	d10c      	bne.n	80013b2 <ModbusTransThread+0x4a>
      {

        buf[c++]=(uint8_t) evt.value.v;
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 80013a8:	461a      	mov	r2, r3
 80013aa:	b2c9      	uxtb	r1, r1
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	5499      	strb	r1, [r3, r2]
      }
    if (evt.status == osEventTimeout)
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b40      	cmp	r3, #64	; 0x40
 80013ba:	d1e0      	bne.n	800137e <ModbusTransThread+0x16>
      {
        if( (c > 0) && (c < 254) ) // ok, something in buffer exist, lets send it
 80013bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00f      	beq.n	80013e4 <ModbusTransThread+0x7c>
 80013c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80013c8:	2bfd      	cmp	r3, #253	; 0xfd
 80013ca:	d80b      	bhi.n	80013e4 <ModbusTransThread+0x7c>
        {
        	HAL_StatusTypeDef AA = HAL_UART_Transmit(&huart6, buf, c, 50); // by USB-CDC
 80013cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f107 0114 	add.w	r1, r7, #20
 80013d6:	2332      	movs	r3, #50	; 0x32
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <ModbusTransThread+0x88>)
 80013da:	f003 faa4 	bl	8004926 <HAL_UART_Transmit>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        }
      c=0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  {
 80013ea:	e7c8      	b.n	800137e <ModbusTransThread+0x16>
 80013ec:	2000434c 	.word	0x2000434c
 80013f0:	2000412c 	.word	0x2000412c

080013f4 <ModbusSetThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusSetThread */
void ModbusSetThread(void const * argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusSetThread */
  /* Infinite loop */
  for(;;)
  {

	for(int i=0;i<16;i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e00c      	b.n	800141c <ModbusSetThread+0x28>
	{
		   ModBus_SetRegister(i,ADCVALUE[i]);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <ModbusSetThread+0x30>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	f000 fadf 	bl	80019d4 <ModBus_SetRegister>
	for(int i=0;i<16;i++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	ddef      	ble.n	8001402 <ModbusSetThread+0xe>
 8001422:	e7eb      	b.n	80013fc <ModbusSetThread+0x8>
 8001424:	200040fc 	.word	0x200040fc

08001428 <ADS1115Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADS1115Thread */
void ADS1115Thread(void const * argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADS1115Thread */
  /* Infinite loop */
  for(;;)
  {
		for( int i = 0; i < 2; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e050      	b.n	80014d8 <ADS1115Thread+0xb0>
			ADSwrite[0] = 0x01;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <ADS1115Thread+0xc0>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
			switch(i) {
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <ADS1115Thread+0x20>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d004      	beq.n	8001450 <ADS1115Thread+0x28>
 8001446:	e007      	b.n	8001458 <ADS1115Thread+0x30>
				case(0):
					ADSwrite[1] = 0x81; // 10000001
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <ADS1115Thread+0xc0>)
 800144a:	2281      	movs	r2, #129	; 0x81
 800144c:	705a      	strb	r2, [r3, #1]
				break;
 800144e:	e003      	b.n	8001458 <ADS1115Thread+0x30>
				case(1):
					ADSwrite[1] = 0xB1;// 10110001
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <ADS1115Thread+0xc0>)
 8001452:	22b1      	movs	r2, #177	; 0xb1
 8001454:	705a      	strb	r2, [r3, #1]
				break;
 8001456:	bf00      	nop
//				break;
//				case(3):
//					ADSwrite[1] = 0xF1;
//				break;
			}
			ADSwrite[2] = 0x83; // 10000011
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <ADS1115Thread+0xc0>)
 800145a:	2283      	movs	r2, #131	; 0x83
 800145c:	709a      	strb	r2, [r3, #2]
			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 800145e:	2364      	movs	r3, #100	; 0x64
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2303      	movs	r3, #3
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <ADS1115Thread+0xc0>)
 8001466:	2190      	movs	r1, #144	; 0x90
 8001468:	4820      	ldr	r0, [pc, #128]	; (80014ec <ADS1115Thread+0xc4>)
 800146a:	f001 fd13 	bl	8002e94 <HAL_I2C_Master_Transmit>
			ADSwrite[0] = 0x00;
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <ADS1115Thread+0xc0>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <ADS1115Thread+0xc0>)
 800147c:	2190      	movs	r1, #144	; 0x90
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <ADS1115Thread+0xc4>)
 8001480:	f001 fd08 	bl	8002e94 <HAL_I2C_Master_Transmit>
			HAL_Delay(20);
 8001484:	2014      	movs	r0, #20
 8001486:	f000 fd87 	bl	8001f98 <HAL_Delay>
			HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 800148a:	2364      	movs	r3, #100	; 0x64
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2302      	movs	r3, #2
 8001490:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <ADS1115Thread+0xc0>)
 8001492:	2190      	movs	r1, #144	; 0x90
 8001494:	4815      	ldr	r0, [pc, #84]	; (80014ec <ADS1115Thread+0xc4>)
 8001496:	f001 fdfb 	bl	8003090 <HAL_I2C_Master_Receive>
			reading = (ADSwrite[0] << 8 | ADSwrite[1]);
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <ADS1115Thread+0xc0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <ADS1115Thread+0xc0>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <ADS1115Thread+0xc8>)
 80014ae:	801a      	strh	r2, [r3, #0]
			 else if(reading >= 0xffff)
			 {
				 reading = 0;
			 }

			voltageT[i] = reading * voltageConv;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <ADS1115Thread+0xc8>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014f4 <ADS1115Thread+0xcc>
 80014c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <ADS1115Thread+0xd0>)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	edc3 7a00 	vstr	s15, [r3]
		for( int i = 0; i < 2; i++) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	ddab      	ble.n	8001436 <ADS1115Thread+0xe>
		}
    delay_ms(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fcaa 	bl	8000e38 <delay_ms>
		for( int i = 0; i < 2; i++) {
 80014e4:	e7a4      	b.n	8001430 <ADS1115Thread+0x8>
 80014e6:	bf00      	nop
 80014e8:	2000411c 	.word	0x2000411c
 80014ec:	2000409c 	.word	0x2000409c
 80014f0:	200040f8 	.word	0x200040f8
 80014f4:	3943a5e3 	.word	0x3943a5e3
 80014f8:	2000410c 	.word	0x2000410c

080014fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150e:	f000 fd23 	bl	8001f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40000400 	.word	0x40000400

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <ModBusTask>:
uint8_t mb_buf_out_count;

void ModBusParse(void);

void ModBusTask(void const * argument)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osEvent evt = osMessageGet(ModBusInHandle,ModBus35);
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <ModBusTask+0x64>)
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	2223      	movs	r2, #35	; 0x23
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fa96 	bl	8005a74 <osMessageGet>
    // Frame end?
    if (evt.status == osEventTimeout)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b40      	cmp	r3, #64	; 0x40
 800154c:	d108      	bne.n	8001560 <ModBusTask+0x30>
      {
        if(mb_buf_in_count > 0) // ok, something in buffer exist, lets parse it
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <ModBusTask+0x68>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <ModBusTask+0x2a>
        {
          ModBusParse();
 8001556:	f000 f893 	bl	8001680 <ModBusParse>
        }  
      mb_buf_in_count=0;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <ModBusTask+0x68>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
      }
    // Wow, something come!
    if (evt.status == osEventMessage)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d1e8      	bne.n	8001538 <ModBusTask+0x8>
      {
        uint8_t byte = (uint8_t) evt.value.v;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	75fb      	strb	r3, [r7, #23]
        // buffer has space for incoming?
        if(mb_buf_in_count<254)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <ModBusTask+0x68>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2bfd      	cmp	r3, #253	; 0xfd
 8001570:	d80c      	bhi.n	800158c <ModBusTask+0x5c>
        {
          mb_buf_in[mb_buf_in_count]=byte;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <ModBusTask+0x68>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <ModBusTask+0x6c>)
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	5453      	strb	r3, [r2, r1]
          mb_buf_in_count=mb_buf_in_count+1; // prevent opt/war on come compilers
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <ModBusTask+0x68>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <ModBusTask+0x68>)
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e7d5      	b.n	8001538 <ModBusTask+0x8>
        }
        else // oops, bad frame, by standard we should drop it and no answer
        {
          mb_buf_in_count=0;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <ModBusTask+0x68>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
  {
 8001592:	e7d1      	b.n	8001538 <ModBusTask+0x8>
 8001594:	20004354 	.word	0x20004354
 8001598:	20004358 	.word	0x20004358
 800159c:	2000435c 	.word	0x2000435c

080015a0 <ModBus_Init>:
      }
  }
}

void ModBus_Init(void)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
  osMessageQDef(ModBusIn, 256, uint8_t);
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <ModBus_Init+0x9c>)
 80015a8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80015ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusInHandle = osMessageCreate(osMessageQ(ModBusIn), NULL);
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 f9f2 	bl	80059a2 <osMessageCreate>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <ModBus_Init+0xa0>)
 80015c2:	601a      	str	r2, [r3, #0]
  osMessageQDef(ModBusOut, 256, uint8_t);
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <ModBus_Init+0x9c>)
 80015c6:	f107 041c 	add.w	r4, r7, #28
 80015ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusOutHandle = osMessageCreate(osMessageQ(ModBusOut), NULL);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f9e3 	bl	80059a2 <osMessageCreate>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <ModBus_Init+0xa4>)
 80015e0:	601a      	str	r2, [r3, #0]
  osThreadDef(ModBusTask, ModBusTask, osPriorityNormal, 0, 128);
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <ModBus_Init+0xa8>)
 80015e4:	463c      	mov	r4, r7
 80015e6:	461d      	mov	r5, r3
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModBusTaskHandle = osThreadCreate(osThread(ModBusTask), NULL);
 80015f4:	463b      	mov	r3, r7
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 f986 	bl	800590a <osThreadCreate>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <ModBus_Init+0xac>)
 8001602:	601a      	str	r2, [r3, #0]
  mb_buf_in_count=0;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <ModBus_Init+0xb0>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
  mb_addr=247; // by default maximum possible adrress
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <ModBus_Init+0xb4>)
 800160c:	22f7      	movs	r2, #247	; 0xf7
 800160e:	701a      	strb	r2, [r3, #0]
  mb_buf_out_count=0;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <ModBus_Init+0xb8>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<ModBusRegisters;i++) 
 8001616:	2300      	movs	r3, #0
 8001618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800161a:	e007      	b.n	800162c <ModBus_Init+0x8c>
  {
    mb_reg[i]=0;
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <ModBus_Init+0xbc>)
 800161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001620:	2100      	movs	r1, #0
 8001622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<ModBusRegisters;i++) 
 8001626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001628:	3301      	adds	r3, #1
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800162c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162e:	2b63      	cmp	r3, #99	; 0x63
 8001630:	ddf4      	ble.n	800161c <ModBus_Init+0x7c>
  }
}
 8001632:	bf00      	nop
 8001634:	3740      	adds	r7, #64	; 0x40
 8001636:	46bd      	mov	sp, r7
 8001638:	bdb0      	pop	{r4, r5, r7, pc}
 800163a:	bf00      	nop
 800163c:	08008e30 	.word	0x08008e30
 8001640:	20004354 	.word	0x20004354
 8001644:	2000434c 	.word	0x2000434c
 8001648:	08008e4c 	.word	0x08008e4c
 800164c:	20004180 	.word	0x20004180
 8001650:	20004358 	.word	0x20004358
 8001654:	20004350 	.word	0x20004350
 8001658:	20004359 	.word	0x20004359
 800165c:	20004184 	.word	0x20004184

08001660 <ModBus_SetAddress>:

void ModBus_SetAddress(uint8_t addr)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  mb_addr = addr;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <ModBus_SetAddress+0x1c>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	7013      	strb	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20004350 	.word	0x20004350

08001680 <ModBusParse>:
void CRC16_OUT(void);
uint8_t CRC16_IN(void);

// parse something in incoming buffer 
void ModBusParse(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
    if(mb_buf_in_count==0) // call as by mistake on empty buffer?
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <ModBusParse+0x1d0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 818d 	beq.w	80019aa <ModBusParse+0x32a>
    {
      return;
    }
    
    if(mb_buf_in[0] != mb_addr) // its not our address!
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <ModBusParse+0x1d4>)
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <ModBusParse+0x1d8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8188 	bne.w	80019ae <ModBusParse+0x32e>
    {
      return;
    }
    // check CRC
    if(CRC16_IN()==0)
 800169e:	f000 fa13 	bl	8001ac8 <CRC16_IN>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 8179 	bne.w	800199c <ModBusParse+0x31c>
    {
      mb_buf_out_count = 0;
 80016aa:	4b6c      	ldr	r3, [pc, #432]	; (800185c <ModBusParse+0x1dc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
      uint16_t st,nu;
      uint8_t func = mb_buf_in[1];
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <ModBusParse+0x1d4>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	71fb      	strb	r3, [r7, #7]
      uint8_t i;
      switch(func)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d003      	beq.n	80016c4 <ModBusParse+0x44>
 80016bc:	2b10      	cmp	r3, #16
 80016be:	f000 8089 	beq.w	80017d4 <ModBusParse+0x154>
 80016c2:	e131      	b.n	8001928 <ModBusParse+0x2a8>
      {
        case 3:
          // read holding registers. by bytes addr func starth startl totalh totall
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80016c4:	4b63      	ldr	r3, [pc, #396]	; (8001854 <ModBusParse+0x1d4>)
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <ModBusParse+0x1d4>)
 80016d0:	78db      	ldrb	r3, [r3, #3]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <ModBusParse+0x1d4>)
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <ModBusParse+0x1d4>)
 80016e4:	795b      	ldrb	r3, [r3, #5]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	4413      	add	r3, r2
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	dd21      	ble.n	800173a <ModBusParse+0xba>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <ModBusParse+0x1dc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	b2d1      	uxtb	r1, r2
 80016fe:	4a57      	ldr	r2, [pc, #348]	; (800185c <ModBusParse+0x1dc>)
 8001700:	7011      	strb	r1, [r2, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b54      	ldr	r3, [pc, #336]	; (8001858 <ModBusParse+0x1d8>)
 8001706:	7819      	ldrb	r1, [r3, #0]
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <ModBusParse+0x1e0>)
 800170a:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <ModBusParse+0x1dc>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	b2d1      	uxtb	r1, r2
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <ModBusParse+0x1dc>)
 8001716:	7011      	strb	r1, [r2, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3b80      	subs	r3, #128	; 0x80
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <ModBusParse+0x1e0>)
 8001722:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <ModBusParse+0x1dc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	b2d1      	uxtb	r1, r2
 800172c:	4a4b      	ldr	r2, [pc, #300]	; (800185c <ModBusParse+0x1dc>)
 800172e:	7011      	strb	r1, [r2, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <ModBusParse+0x1e0>)
 8001734:	2102      	movs	r1, #2
 8001736:	5499      	strb	r1, [r3, r2]
                {
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
                }
            }
          break;
 8001738:	e118      	b.n	800196c <ModBusParse+0x2ec>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <ModBusParse+0x1dc>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	b2d1      	uxtb	r1, r2
 8001742:	4a46      	ldr	r2, [pc, #280]	; (800185c <ModBusParse+0x1dc>)
 8001744:	7011      	strb	r1, [r2, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <ModBusParse+0x1d8>)
 800174a:	7819      	ldrb	r1, [r3, #0]
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <ModBusParse+0x1e0>)
 800174e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <ModBusParse+0x1dc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	b2d1      	uxtb	r1, r2
 8001758:	4a40      	ldr	r2, [pc, #256]	; (800185c <ModBusParse+0x1dc>)
 800175a:	7011      	strb	r1, [r2, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	4a40      	ldr	r2, [pc, #256]	; (8001860 <ModBusParse+0x1e0>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=nu*2; // how many bytes we will send?
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b3c      	ldr	r3, [pc, #240]	; (800185c <ModBusParse+0x1dc>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	1c59      	adds	r1, r3, #1
 800176e:	b2c8      	uxtb	r0, r1
 8001770:	493a      	ldr	r1, [pc, #232]	; (800185c <ModBusParse+0x1dc>)
 8001772:	7008      	strb	r0, [r1, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	0053      	lsls	r3, r2, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <ModBusParse+0x1e0>)
 800177c:	545a      	strb	r2, [r3, r1]
              for(i=st;i<(st+nu);i++)
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e020      	b.n	80017c6 <ModBusParse+0x146>
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4a37      	ldr	r2, [pc, #220]	; (8001864 <ModBusParse+0x1e4>)
 8001788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b299      	uxth	r1, r3
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <ModBusParse+0x1dc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	b2d0      	uxtb	r0, r2
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <ModBusParse+0x1dc>)
 800179a:	7010      	strb	r0, [r2, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <ModBusParse+0x1e0>)
 80017a2:	5499      	strb	r1, [r3, r2]
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <ModBusParse+0x1e4>)
 80017a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <ModBusParse+0x1dc>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	b2d0      	uxtb	r0, r2
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <ModBusParse+0x1dc>)
 80017b6:	7010      	strb	r0, [r2, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <ModBusParse+0x1e0>)
 80017be:	5499      	strb	r1, [r3, r2]
              for(i=st;i<(st+nu);i++)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	88b9      	ldrh	r1, [r7, #4]
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	440b      	add	r3, r1
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbd8      	blt.n	8001784 <ModBusParse+0x104>
          break;
 80017d2:	e0cb      	b.n	800196c <ModBusParse+0x2ec>
        case 16: 
          // write holding registers. by bytes addr func starth startl totalh totall num_bytes regh regl ...
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <ModBusParse+0x1d4>)
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <ModBusParse+0x1d4>)
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <ModBusParse+0x1d4>)
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <ModBusParse+0x1d4>)
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 80017fc:	88ba      	ldrh	r2, [r7, #4]
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	4413      	add	r3, r2
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	dd21      	ble.n	800184a <ModBusParse+0x1ca>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <ModBusParse+0x1dc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <ModBusParse+0x1dc>)
 8001810:	7011      	strb	r1, [r2, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ModBusParse+0x1d8>)
 8001816:	7819      	ldrb	r1, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <ModBusParse+0x1e0>)
 800181a:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <ModBusParse+0x1dc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	b2d1      	uxtb	r1, r2
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <ModBusParse+0x1dc>)
 8001826:	7011      	strb	r1, [r2, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	3b80      	subs	r3, #128	; 0x80
 800182e:	b2d9      	uxtb	r1, r3
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <ModBusParse+0x1e0>)
 8001832:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <ModBusParse+0x1dc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	b2d1      	uxtb	r1, r2
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <ModBusParse+0x1dc>)
 800183e:	7011      	strb	r1, [r2, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <ModBusParse+0x1e0>)
 8001844:	2102      	movs	r1, #2
 8001846:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
            }
          break;
 8001848:	e090      	b.n	800196c <ModBusParse+0x2ec>
              for(i=0;i<nu;i++)
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e024      	b.n	800189a <ModBusParse+0x21a>
 8001850:	20004358 	.word	0x20004358
 8001854:	2000435c 	.word	0x2000435c
 8001858:	20004350 	.word	0x20004350
 800185c:	20004359 	.word	0x20004359
 8001860:	2000424c 	.word	0x2000424c
 8001864:	20004184 	.word	0x20004184
                  mb_reg[st+i]=mb_buf_in[7+i*2]*256+mb_buf_in[8+i*2];
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	3307      	adds	r3, #7
 800186e:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <ModBusParse+0x338>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	b29b      	uxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b299      	uxth	r1, r3
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3304      	adds	r3, #4
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <ModBusParse+0x338>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	b29a      	uxth	r2, r3
 8001884:	88b8      	ldrh	r0, [r7, #4]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4403      	add	r3, r0
 800188a:	440a      	add	r2, r1
 800188c:	b291      	uxth	r1, r2
 800188e:	4a4b      	ldr	r2, [pc, #300]	; (80019bc <ModBusParse+0x33c>)
 8001890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
              for(i=0;i<nu;i++)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	b29b      	uxth	r3, r3
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8e1      	bhi.n	8001868 <ModBusParse+0x1e8>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <ModBusParse+0x340>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	b2d1      	uxtb	r1, r2
 80018ac:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <ModBusParse+0x340>)
 80018ae:	7011      	strb	r1, [r2, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <ModBusParse+0x344>)
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <ModBusParse+0x348>)
 80018b8:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <ModBusParse+0x340>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	b2d1      	uxtb	r1, r2
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <ModBusParse+0x340>)
 80018c4:	7011      	strb	r1, [r2, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4a3f      	ldr	r2, [pc, #252]	; (80019c8 <ModBusParse+0x348>)
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <ModBusParse+0x340>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	b2d1      	uxtb	r1, r2
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <ModBusParse+0x340>)
 80018d8:	7011      	strb	r1, [r2, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <ModBusParse+0x338>)
 80018de:	7899      	ldrb	r1, [r3, #2]
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <ModBusParse+0x348>)
 80018e2:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <ModBusParse+0x340>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	b2d1      	uxtb	r1, r2
 80018ec:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <ModBusParse+0x340>)
 80018ee:	7011      	strb	r1, [r2, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <ModBusParse+0x338>)
 80018f4:	78d9      	ldrb	r1, [r3, #3]
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <ModBusParse+0x348>)
 80018f8:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <ModBusParse+0x340>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <ModBusParse+0x340>)
 8001904:	7011      	strb	r1, [r2, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <ModBusParse+0x338>)
 800190a:	7919      	ldrb	r1, [r3, #4]
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <ModBusParse+0x348>)
 800190e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <ModBusParse+0x340>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	b2d1      	uxtb	r1, r2
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <ModBusParse+0x340>)
 800191a:	7011      	strb	r1, [r2, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <ModBusParse+0x338>)
 8001920:	7959      	ldrb	r1, [r3, #5]
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <ModBusParse+0x348>)
 8001924:	5499      	strb	r1, [r3, r2]
          break;
 8001926:	e021      	b.n	800196c <ModBusParse+0x2ec>
        default:  
          // Exception as we does not provide this function
          mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <ModBusParse+0x340>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	b2d1      	uxtb	r1, r2
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <ModBusParse+0x340>)
 8001932:	7011      	strb	r1, [r2, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <ModBusParse+0x344>)
 8001938:	7819      	ldrb	r1, [r3, #0]
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <ModBusParse+0x348>)
 800193c:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=func+0x80;
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <ModBusParse+0x340>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	b2d1      	uxtb	r1, r2
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <ModBusParse+0x340>)
 8001948:	7011      	strb	r1, [r2, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	3b80      	subs	r3, #128	; 0x80
 8001950:	b2d9      	uxtb	r1, r3
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <ModBusParse+0x348>)
 8001954:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <ModBusParse+0x340>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	b2d1      	uxtb	r1, r2
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <ModBusParse+0x340>)
 8001960:	7011      	strb	r1, [r2, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <ModBusParse+0x348>)
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]
          break;
 800196a:	bf00      	nop
      }
      
      CRC16_OUT();
 800196c:	f000 f84a 	bl	8001a04 <CRC16_OUT>
      
     // If you want directly to USB-CDC 
     //CDC_Transmit_FS(&mb_buf_out[0], mb_buf_out_count);
     for(int i=0;i<mb_buf_out_count;i++)
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	e00c      	b.n	8001990 <ModBusParse+0x310>
        {
          osMessagePut(ModBusOutHandle,mb_buf_out[i],0);
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <ModBusParse+0x34c>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <ModBusParse+0x348>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	4619      	mov	r1, r3
 8001986:	f004 f835 	bl	80059f4 <osMessagePut>
     for(int i=0;i<mb_buf_out_count;i++)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <ModBusParse+0x340>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4293      	cmp	r3, r2
 800199a:	dbec      	blt.n	8001976 <ModBusParse+0x2f6>
        }
    }
    // Ok, we parsed buffer, clean up
    mb_buf_in_count=0;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <ModBusParse+0x350>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    mb_buf_out_count=0;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <ModBusParse+0x340>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e002      	b.n	80019b0 <ModBusParse+0x330>
      return;
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <ModBusParse+0x330>
      return;
 80019ae:	bf00      	nop
}
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000435c 	.word	0x2000435c
 80019bc:	20004184 	.word	0x20004184
 80019c0:	20004359 	.word	0x20004359
 80019c4:	20004350 	.word	0x20004350
 80019c8:	2000424c 	.word	0x2000424c
 80019cc:	2000434c 	.word	0x2000434c
 80019d0:	20004358 	.word	0x20004358

080019d4 <ModBus_SetRegister>:

// set value of register
void ModBus_SetRegister(uint8_t reg,uint16_t value)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80bb      	strh	r3, [r7, #4]
  if(reg<ModBusRegisters)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b63      	cmp	r3, #99	; 0x63
 80019e8:	d804      	bhi.n	80019f4 <ModBus_SetRegister+0x20>
  {
    mb_reg[reg]=value;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4904      	ldr	r1, [pc, #16]	; (8001a00 <ModBus_SetRegister+0x2c>)
 80019ee:	88ba      	ldrh	r2, [r7, #4]
 80019f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20004184 	.word	0x20004184

08001a04 <CRC16_OUT>:


// Calculate CRC for outcoming buffer
// and place it to end.
void CRC16_OUT(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0e:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	80bb      	strh	r3, [r7, #4]
 8001a24:	e025      	b.n	8001a72 <CRC16_OUT+0x6e>
  {
    crc ^= mb_buf_out[pos];
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <CRC16_OUT+0xbc>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4053      	eors	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001a34:	2308      	movs	r3, #8
 8001a36:	70fb      	strb	r3, [r7, #3]
 8001a38:	e015      	b.n	8001a66 <CRC16_OUT+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00a      	beq.n	8001a5a <CRC16_OUT+0x56>
      {
      crc >>= 1;
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001a50:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001a54:	43db      	mvns	r3, r3
 8001a56:	80fb      	strh	r3, [r7, #6]
 8001a58:	e002      	b.n	8001a60 <CRC16_OUT+0x5c>
      }
    else
      crc >>= 1;
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	70fb      	strb	r3, [r7, #3]
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e6      	bne.n	8001a3a <CRC16_OUT+0x36>
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	80bb      	strh	r3, [r7, #4]
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <CRC16_OUT+0xc0>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3d3      	bcc.n	8001a26 <CRC16_OUT+0x22>
    }
  }
  lo = crc & 0xFF;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	707b      	strb	r3, [r7, #1]
  
  mb_buf_out[mb_buf_out_count++] = lo;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <CRC16_OUT+0xc0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	b2d1      	uxtb	r1, r2
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <CRC16_OUT+0xc0>)
 8001a94:	7011      	strb	r1, [r2, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <CRC16_OUT+0xbc>)
 8001a9a:	78bb      	ldrb	r3, [r7, #2]
 8001a9c:	5453      	strb	r3, [r2, r1]
  mb_buf_out[mb_buf_out_count++] = hi;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <CRC16_OUT+0xc0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	b2d1      	uxtb	r1, r2
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <CRC16_OUT+0xc0>)
 8001aa8:	7011      	strb	r1, [r2, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <CRC16_OUT+0xbc>)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	5453      	strb	r3, [r2, r1]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000424c 	.word	0x2000424c
 8001ac4:	20004359 	.word	0x20004359

08001ac8 <CRC16_IN>:

// Calculate CRC fro incoming buffer
// Return 0 - if CRC is correct, overwise return 0 
uint8_t CRC16_IN(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad2:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	80bb      	strh	r3, [r7, #4]
 8001ae8:	e025      	b.n	8001b36 <CRC16_IN+0x6e>
  {
    crc ^= mb_buf_in[pos];
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <CRC16_IN+0xb8>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4053      	eors	r3, r2
 8001af6:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001af8:	2308      	movs	r3, #8
 8001afa:	70fb      	strb	r3, [r7, #3]
 8001afc:	e015      	b.n	8001b2a <CRC16_IN+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <CRC16_IN+0x56>
      {
      crc >>= 1;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001b14:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	80fb      	strh	r3, [r7, #6]
 8001b1c:	e002      	b.n	8001b24 <CRC16_IN+0x5c>
      }
    else
      crc >>= 1;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	70fb      	strb	r3, [r7, #3]
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e6      	bne.n	8001afe <CRC16_IN+0x36>
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	3301      	adds	r3, #1
 8001b34:	80bb      	strh	r3, [r7, #4]
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <CRC16_IN+0xbc>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3b02      	subs	r3, #2
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbd3      	blt.n	8001aea <CRC16_IN+0x22>
    }
  }
  lo = crc & 0xFF;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	707b      	strb	r3, [r7, #1]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <CRC16_IN+0xbc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3b02      	subs	r3, #2
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <CRC16_IN+0xb8>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	78ba      	ldrb	r2, [r7, #2]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d109      	bne.n	8001b72 <CRC16_IN+0xaa>
       (mb_buf_in[mb_buf_in_count-1] == hi) )
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <CRC16_IN+0xbc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <CRC16_IN+0xb8>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001b68:	787a      	ldrb	r2, [r7, #1]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d101      	bne.n	8001b72 <CRC16_IN+0xaa>
    {
      return 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <CRC16_IN+0xac>
    }
  return 1;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000435c 	.word	0x2000435c
 8001b84:	20004358 	.word	0x20004358

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x54>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_MspInit+0x54>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x54>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_MspInit+0x54>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_MspInit+0x54>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_MspInit+0x54>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	210f      	movs	r1, #15
 8001bca:	f06f 0001 	mvn.w	r0, #1
 8001bce:	f000 fabd 	bl	800214c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_I2C_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12b      	bne.n	8001c5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c22:	2312      	movs	r3, #18
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_I2C_MspInit+0x8c>)
 8001c3a:	f000 fe41 	bl	80028c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_UART_MspInit+0xf0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d162      	bne.n	8001d58 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a2b      	ldr	r2, [pc, #172]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_UART_MspInit+0xf4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4820      	ldr	r0, [pc, #128]	; (8001d68 <HAL_UART_MspInit+0xf8>)
 8001ce6:	f000 fdeb 	bl	80028c0 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_UART_MspInit+0x100>)
 8001cee:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001cf2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001cf6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001d2c:	480f      	ldr	r0, [pc, #60]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d2e:	f000 fa37 	bl	80021a0 <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d38:	f7ff fbf2 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_UART_MspInit+0xfc>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	2047      	movs	r0, #71	; 0x47
 8001d4e:	f000 f9fd 	bl	800214c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d52:	2047      	movs	r0, #71	; 0x47
 8001d54:	f000 fa16 	bl	8002184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40011400 	.word	0x40011400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	2000403c 	.word	0x2000403c
 8001d70:	40026428 	.word	0x40026428

08001d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	201d      	movs	r0, #29
 8001d8a:	f000 f9df 	bl	800214c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001d8e:	201d      	movs	r0, #29
 8001d90:	f000 f9f8 	bl	8002184 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_InitTick+0xa0>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_InitTick+0xa0>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_InitTick+0xa0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 faf6 	bl	80043ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dc0:	f002 facc 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8001dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_InitTick+0xa4>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_InitTick+0xa8>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_InitTick+0xac>)
 8001dd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_InitTick+0xa8>)
 8001ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_InitTick+0xa8>)
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_InitTick+0xa8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_InitTick+0xa8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <HAL_InitTick+0xa8>)
 8001df6:	f002 fb0b 	bl	8004410 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001e00:	4806      	ldr	r0, [pc, #24]	; (8001e1c <HAL_InitTick+0xa8>)
 8001e02:	f002 fb3a 	bl	800447a <HAL_TIM_Base_Start_IT>
 8001e06:	4603      	mov	r3, r0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	2000445c 	.word	0x2000445c
 8001e20:	40000400 	.word	0x40000400

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM3_IRQHandler+0x10>)
 8001e5e:	f002 fb30 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000445c 	.word	0x2000445c

08001e6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA2_Stream1_IRQHandler+0x10>)
 8001e72:	f000 fabd 	bl	80023f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000403c 	.word	0x2000403c

08001e80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <USART6_IRQHandler+0x10>)
 8001e86:	f002 fe67 	bl	8004b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000412c 	.word	0x2000412c

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <SystemInit+0x28>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <SystemInit+0x28>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SystemInit+0x28>)
 8001eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eae:	609a      	str	r2, [r3, #8]
#endif
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ec6:	e003      	b.n	8001ed0 <LoopCopyDataInit>

08001ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ece:	3104      	adds	r1, #4

08001ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ed8:	d3f6      	bcc.n	8001ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001edc:	e002      	b.n	8001ee4 <LoopFillZerobss>

08001ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ee0:	f842 3b04 	str.w	r3, [r2], #4

08001ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ee8:	d3f9      	bcc.n	8001ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffd3 	bl	8001e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f005 fec3 	bl	8007c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7fe fff1 	bl	8000ed8 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001efc:	08008ee8 	.word	0x08008ee8
  ldr  r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f04:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001f08:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001f0c:	200044a0 	.word	0x200044a0

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f8fa 	bl	8002136 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff ff16 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fe1e 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	2000449c 	.word	0x2000449c

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000449c 	.word	0x2000449c

08001f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff ffee 	bl	8001f80 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d005      	beq.n	8001fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_Delay+0x40>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d8f7      	bhi.n	8001fc0 <HAL_Delay+0x28>
  {
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000008 	.word	0x20000008

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff4c 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215e:	f7ff ff61 	bl	8002024 <__NVIC_GetPriorityGrouping>
 8002162:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	6978      	ldr	r0, [r7, #20]
 800216a:	f7ff ffb1 	bl	80020d0 <NVIC_EncodePriority>
 800216e:	4602      	mov	r2, r0
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff80 	bl	800207c <__NVIC_SetPriority>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff54 	bl	8002040 <__NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fee8 	bl	8001f80 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e099      	b.n	80022f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021dc:	e00f      	b.n	80021fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021de:	f7ff fecf 	bl	8001f80 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d908      	bls.n	80021fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e078      	b.n	80022f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e8      	bne.n	80021de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_DMA_Init+0x158>)
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2b04      	cmp	r3, #4
 8002256:	d107      	bne.n	8002268 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4313      	orrs	r3, r2
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2b04      	cmp	r3, #4
 8002290:	d117      	bne.n	80022c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fa91 	bl	80027cc <DMA_CheckFifoParam>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022be:	2301      	movs	r3, #1
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa48 	bl	8002760 <DMA_CalcBaseAndBitshift>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	223f      	movs	r2, #63	; 0x3f
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	f010803f 	.word	0xf010803f

080022fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_DMA_Start_IT+0x26>
 800231e:	2302      	movs	r3, #2
 8002320:	e040      	b.n	80023a4 <HAL_DMA_Start_IT+0xa8>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12f      	bne.n	8002396 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f9da 	bl	8002704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	223f      	movs	r2, #63	; 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0216 	orr.w	r2, r2, #22
 800236a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0208 	orr.w	r2, r2, #8
 8002382:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e005      	b.n	80023a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d004      	beq.n	80023ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00c      	b.n	80023e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2205      	movs	r2, #5
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_DMA_IRQHandler+0x258>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a92      	ldr	r2, [pc, #584]	; (800264c <HAL_DMA_IRQHandler+0x25c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2208      	movs	r2, #8
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01a      	beq.n	800245c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2208      	movs	r2, #8
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2201      	movs	r2, #1
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 0202 	orr.w	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2204      	movs	r2, #4
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2204      	movs	r2, #4
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2210      	movs	r2, #16
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03c      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2210      	movs	r2, #16
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d024      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
 800251e:	e01f      	b.n	8002560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e016      	b.n	8002560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0208 	bic.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2220      	movs	r2, #32
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 808e 	beq.w	800268e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8086 	beq.w	800268e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2220      	movs	r2, #32
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b05      	cmp	r3, #5
 8002598:	d136      	bne.n	8002608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_IRQHandler+0x1da>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	223f      	movs	r2, #63	; 0x3f
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d07d      	beq.n	80026fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
        }
        return;
 8002606:	e078      	b.n	80026fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01c      	beq.n	8002650 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d108      	bne.n	8002636 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	2b00      	cmp	r3, #0
 800262a:	d030      	beq.n	800268e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e02b      	b.n	800268e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d027      	beq.n	800268e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e022      	b.n	800268e <HAL_DMA_IRQHandler+0x29e>
 8002648:	20000000 	.word	0x20000000
 800264c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0210 	bic.w	r2, r2, #16
 800266c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	2b00      	cmp	r3, #0
 8002694:	d032      	beq.n	80026fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d307      	bcc.n	80026d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f2      	bne.n	80026ba <HAL_DMA_IRQHandler+0x2ca>
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e000      	b.n	80026fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80026fa:	bf00      	nop
    }
  }
}
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop

08002704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d108      	bne.n	8002744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002742:	e007      	b.n	8002754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3b10      	subs	r3, #16
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <DMA_CalcBaseAndBitshift+0x68>)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d909      	bls.n	80027a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58
 80027a0:	e007      	b.n	80027b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	aaaaaaab 	.word	0xaaaaaaab
 80027c8:	08008e88 	.word	0x08008e88

080027cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11f      	bne.n	8002826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d855      	bhi.n	8002898 <DMA_CheckFifoParam+0xcc>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <DMA_CheckFifoParam+0x28>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002805 	.word	0x08002805
 80027f8:	08002817 	.word	0x08002817
 80027fc:	08002805 	.word	0x08002805
 8002800:	08002899 	.word	0x08002899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d045      	beq.n	800289c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e042      	b.n	800289c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800281e:	d13f      	bne.n	80028a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002824:	e03c      	b.n	80028a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	d121      	bne.n	8002874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d836      	bhi.n	80028a4 <DMA_CheckFifoParam+0xd8>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <DMA_CheckFifoParam+0x70>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002853 	.word	0x08002853
 8002844:	0800284d 	.word	0x0800284d
 8002848:	08002865 	.word	0x08002865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e02f      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d024      	beq.n	80028a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002862:	e021      	b.n	80028a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800286c:	d11e      	bne.n	80028ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002872:	e01b      	b.n	80028ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d902      	bls.n	8002880 <DMA_CheckFifoParam+0xb4>
 800287a:	2b03      	cmp	r3, #3
 800287c:	d003      	beq.n	8002886 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800287e:	e018      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e015      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00e      	beq.n	80028b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      break;
 8002896:	e00b      	b.n	80028b0 <DMA_CheckFifoParam+0xe4>
      break;
 8002898:	bf00      	nop
 800289a:	e00a      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 800289c:	bf00      	nop
 800289e:	e008      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 80028a0:	bf00      	nop
 80028a2:	e006      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 80028a4:	bf00      	nop
 80028a6:	e004      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 80028a8:	bf00      	nop
 80028aa:	e002      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 80028b0:	bf00      	nop
    }
  } 
  
  return status; 
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e16b      	b.n	8002bb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f040 815a 	bne.w	8002bae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d00b      	beq.n	800291a <HAL_GPIO_Init+0x5a>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800290e:	2b11      	cmp	r3, #17
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b12      	cmp	r3, #18
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0xfc>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b12      	cmp	r3, #18
 80029ba:	d123      	bne.n	8002a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80b4 	beq.w	8002bae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_GPIO_Init+0x308>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_GPIO_Init+0x308>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_GPIO_Init+0x308>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a62:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_GPIO_Init+0x310>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_GPIO_Init+0x226>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_GPIO_Init+0x314>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d025      	beq.n	8002ae2 <HAL_GPIO_Init+0x222>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <HAL_GPIO_Init+0x318>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <HAL_GPIO_Init+0x21e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4e      	ldr	r2, [pc, #312]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0x21a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_GPIO_Init+0x320>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0x216>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4c      	ldr	r2, [pc, #304]	; (8002be4 <HAL_GPIO_Init+0x324>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	; (8002be8 <HAL_GPIO_Init+0x328>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x20e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4a      	ldr	r2, [pc, #296]	; (8002bec <HAL_GPIO_Init+0x32c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_GPIO_Init+0x20a>
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	e00e      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002aca:	2308      	movs	r3, #8
 8002acc:	e00c      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ace:	2306      	movs	r3, #6
 8002ad0:	e00a      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	e008      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e004      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f002 0203 	and.w	r2, r2, #3
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	4093      	lsls	r3, r2
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af8:	4934      	ldr	r1, [pc, #208]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2a:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b30:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	f67f ae90 	bls.w	80028dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3724      	adds	r7, #36	; 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	40020c00 	.word	0x40020c00
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40021400 	.word	0x40021400
 8002be8:	40021800 	.word	0x40021800
 8002bec:	40021c00 	.word	0x40021c00
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e11f      	b.n	8002e76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe ffc8 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	; 0x24
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c88:	f001 fb68 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a7b      	ldr	r2, [pc, #492]	; (8002e80 <HAL_I2C_Init+0x25c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d807      	bhi.n	8002ca8 <HAL_I2C_Init+0x84>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_I2C_Init+0x260>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e006      	b.n	8002cb6 <HAL_I2C_Init+0x92>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_I2C_Init+0x264>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0db      	b.n	8002e76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <HAL_I2C_Init+0x268>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9b      	lsrs	r3, r3, #18
 8002cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a64      	ldr	r2, [pc, #400]	; (8002e80 <HAL_I2C_Init+0x25c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d802      	bhi.n	8002cf8 <HAL_I2C_Init+0xd4>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	e009      	b.n	8002d0c <HAL_I2C_Init+0xe8>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_I2C_Init+0x26c>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4956      	ldr	r1, [pc, #344]	; (8002e80 <HAL_I2C_Init+0x25c>)
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d80d      	bhi.n	8002d48 <HAL_I2C_Init+0x124>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e59      	subs	r1, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	bf38      	it	cc
 8002d44:	2304      	movcc	r3, #4
 8002d46:	e04f      	b.n	8002de8 <HAL_I2C_Init+0x1c4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <HAL_I2C_Init+0x150>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e012      	b.n	8002d9a <HAL_I2C_Init+0x176>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x17e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e022      	b.n	8002de8 <HAL_I2C_Init+0x1c4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10e      	bne.n	8002dc8 <HAL_I2C_Init+0x1a4>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e58      	subs	r0, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	440b      	add	r3, r1
 8002db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Init+0x1c4>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6809      	ldr	r1, [r1, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6911      	ldr	r1, [r2, #16]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	000186a0 	.word	0x000186a0
 8002e84:	001e847f 	.word	0x001e847f
 8002e88:	003d08ff 	.word	0x003d08ff
 8002e8c:	431bde83 	.word	0x431bde83
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	817b      	strh	r3, [r7, #10]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff f86a 	bl	8001f80 <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 80e0 	bne.w	800307c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4970      	ldr	r1, [pc, #448]	; (8003088 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fc56 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0d3      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2C_Master_Transmit+0x50>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e0cc      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d007      	beq.n	8002f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2221      	movs	r2, #33	; 0x21
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f4c:	8979      	ldrh	r1, [r7, #10]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fac2 	bl	80034dc <I2C_MasterRequestWrite>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08d      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f78:	e066      	b.n	8003048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fcd0 	bl	8003924 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d107      	bne.n	8002fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_I2C_Master_Transmit+0x188>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d017      	beq.n	800301c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fcc0 	bl	80039a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b04      	cmp	r3, #4
 8003032:	d107      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01a      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d194      	bne.n	8002f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	00100002 	.word	0x00100002
 800308c:	ffff0000 	.word	0xffff0000

08003090 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7fe ff6c 	bl	8001f80 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f040 820b 	bne.w	80034ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2319      	movs	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	497c      	ldr	r1, [pc, #496]	; (80032b4 <HAL_I2C_Master_Receive+0x224>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fb58 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e1fe      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x50>
 80030dc:	2302      	movs	r3, #2
 80030de:	e1f7      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d007      	beq.n	8003106 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2222      	movs	r2, #34	; 0x22
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_I2C_Master_Receive+0x228>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa46 	bl	80035e0 <I2C_MasterRequestRead>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1b8      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d113      	bne.n	800318e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	623b      	str	r3, [r7, #32]
 800317a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e18c      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b01      	cmp	r3, #1
 8003194:	d11b      	bne.n	80031ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e16c      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d11b      	bne.n	800320e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	e14c      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003234:	e138      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	2b03      	cmp	r3, #3
 800323c:	f200 80f1 	bhi.w	8003422 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	2b01      	cmp	r3, #1
 8003246:	d123      	bne.n	8003290 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fbeb 	bl	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e139      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800328e:	e10b      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b02      	cmp	r3, #2
 8003296:	d14e      	bne.n	8003336 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	2200      	movs	r2, #0
 80032a0:	4906      	ldr	r1, [pc, #24]	; (80032bc <HAL_I2C_Master_Receive+0x22c>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa68 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e10e      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
 80032b2:	bf00      	nop
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000
 80032bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003334:	e0b8      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2200      	movs	r2, #0
 800333e:	4966      	ldr	r1, [pc, #408]	; (80034d8 <HAL_I2C_Master_Receive+0x448>)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa19 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0bf      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	494f      	ldr	r1, [pc, #316]	; (80034d8 <HAL_I2C_Master_Receive+0x448>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f9eb 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e091      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003420:	e042      	b.n	80034a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fafe 	bl	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04c      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d118      	bne.n	80034a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f aec2 	bne.w	8003236 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010004 	.word	0x00010004

080034dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d006      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00b      	b.n	8003530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b12      	cmp	r3, #18
 800351e:	d107      	bne.n	8003530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f91b 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e035      	b.n	80035ce <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356a:	d108      	bne.n	800357e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	e01b      	b.n	80035b6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	11db      	asrs	r3, r3, #7
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 0306 	and.w	r3, r3, #6
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f063 030f 	orn	r3, r3, #15
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	490f      	ldr	r1, [pc, #60]	; (80035d8 <I2C_MasterRequestWrite+0xfc>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f942 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e010      	b.n	80035ce <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <I2C_MasterRequestWrite+0x100>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f932 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	00010008 	.word	0x00010008
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	460b      	mov	r3, r1
 80035ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d006      	beq.n	800361a <I2C_MasterRequestRead+0x3a>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d003      	beq.n	800361a <I2C_MasterRequestRead+0x3a>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003618:	d108      	bne.n	800362c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00b      	b.n	8003644 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b11      	cmp	r3, #17
 8003632:	d107      	bne.n	8003644 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f891 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00c      	beq.n	8003676 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e078      	b.n	8003768 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367e:	d108      	bne.n	8003692 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	e05e      	b.n	8003750 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	11db      	asrs	r3, r3, #7
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0306 	and.w	r3, r3, #6
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f063 030f 	orn	r3, r3, #15
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4930      	ldr	r1, [pc, #192]	; (8003770 <I2C_MasterRequestRead+0x190>)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f8b8 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e053      	b.n	8003768 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4929      	ldr	r1, [pc, #164]	; (8003774 <I2C_MasterRequestRead+0x194>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8a8 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e043      	b.n	8003768 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f830 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e017      	b.n	8003768 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003738:	897b      	ldrh	r3, [r7, #10]
 800373a:	11db      	asrs	r3, r3, #7
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 0306 	and.w	r3, r3, #6
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f063 030e 	orn	r3, r3, #14
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4907      	ldr	r1, [pc, #28]	; (8003774 <I2C_MasterRequestRead+0x194>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f865 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	00010008 	.word	0x00010008
 8003774:	00010002 	.word	0x00010002

08003778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	e025      	b.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d021      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fbf5 	bl	8001f80 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d116      	bne.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e023      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10d      	bne.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	e00c      	b.n	8003816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d0b6      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003834:	e051      	b.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d123      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e046      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d021      	beq.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe fb73 	bl	8001f80 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e020      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d18d      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003930:	e02d      	b.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f8ce 	bl	8003ad4 <I2C_IsAcknowledgeFailed>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e02d      	b.n	800399e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fb19 	bl	8001f80 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d1ca      	bne.n	8003932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b2:	e02d      	b.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f88d 	bl	8003ad4 <I2C_IsAcknowledgeFailed>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e02d      	b.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d021      	beq.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039cc:	f7fe fad8 	bl	8001f80 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d302      	bcc.n	80039e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e007      	b.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d1ca      	bne.n	80039b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a34:	e042      	b.n	8003abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d119      	bne.n	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0210 	mvn.w	r2, #16
 8003a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e029      	b.n	8003acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7fe fa82 	bl	8001f80 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d1b5      	bne.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d11b      	bne.n	8003b24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003af4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f043 0204 	orr.w	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e25b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	4ba3      	ldr	r3, [pc, #652]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b9d      	ldr	r3, [pc, #628]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b99      	ldr	r3, [pc, #612]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d157      	bne.n	8003c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e236      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x74>
 8003b9a:	4b91      	ldr	r3, [pc, #580]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a90      	ldr	r2, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a8a      	ldr	r2, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a83      	ldr	r2, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe f9c8 	bl	8001f80 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe f9c4 	bl	8001f80 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1fb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe f9b4 	bl	8001f80 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe f9b0 	bl	8001f80 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1e7      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0xe8>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d063      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b62      	ldr	r3, [pc, #392]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d11c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1bb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4952      	ldr	r1, [pc, #328]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe f969 	bl	8001f80 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe f965 	bl	8001f80 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e19c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4940      	ldr	r1, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f948 	bl	8001f80 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fe f944 	bl	8001f80 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e17b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d030      	beq.n	8003d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fe f928 	bl	8001f80 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe f924 	bl	8001f80 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e15b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d52:	e015      	b.n	8003d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe f911 	bl	8001f80 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fe f90d 	bl	8001f80 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e144      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a0 	beq.w	8003ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d121      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe f8d3 	bl	8001f80 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e011      	b.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
 8003dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fe f8c6 	bl	8001f80 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0fd      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x4d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
 8003e16:	4b7d      	ldr	r3, [pc, #500]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	e01c      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_OscConfig+0x312>
 8003e2c:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a76      	ldr	r2, [pc, #472]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b74      	ldr	r3, [pc, #464]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e00b      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e46:	4b71      	ldr	r3, [pc, #452]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a70      	ldr	r2, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b6e      	ldr	r3, [pc, #440]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a6d      	ldr	r2, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fe f88b 	bl	8001f80 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fe f887 	bl	8001f80 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0bc      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ee      	beq.n	8003e6e <HAL_RCC_OscConfig+0x33a>
 8003e90:	e014      	b.n	8003ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe f875 	bl	8001f80 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe f871 	bl	8001f80 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0a6      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb0:	4b56      	ldr	r3, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ee      	bne.n	8003e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a51      	ldr	r2, [pc, #324]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8092 	beq.w	8003ffc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d05c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d141      	bne.n	8003f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe f845 	bl	8001f80 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe f841 	bl	8001f80 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e078      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4933      	ldr	r1, [pc, #204]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe f81a 	bl	8001f80 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe f816 	bl	8001f80 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04d      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x41c>
 8003f6e:	e045      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fe f803 	bl	8001f80 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd ffff 	bl	8001f80 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e036      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x44a>
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e029      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000
 800400c:	40023800 	.word	0x40023800
 8004010:	42470060 	.word	0x42470060

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fd ff3c 	bl	8001f80 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fd ff38 	bl	8001f80 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	fa21 f303 	lsr.w	r3, r1, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fdda 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08008e70 	.word	0x08008e70
 80041d8:	20000000 	.word	0x20000000
 80041dc:	20000004 	.word	0x20000004

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f6:	4b50      	ldr	r3, [pc, #320]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d007      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x32>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d008      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x38>
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 808d 	bne.w	8004326 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b4b      	ldr	r3, [pc, #300]	; (800433c <HAL_RCC_GetSysClockFreq+0x15c>)
 800420e:	60bb      	str	r3, [r7, #8]
       break;
 8004210:	e08c      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b4b      	ldr	r3, [pc, #300]	; (8004340 <HAL_RCC_GetSysClockFreq+0x160>)
 8004214:	60bb      	str	r3, [r7, #8]
      break;
 8004216:	e089      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b47      	ldr	r3, [pc, #284]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004222:	4b45      	ldr	r3, [pc, #276]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b42      	ldr	r3, [pc, #264]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea03 0501 	and.w	r5, r3, r1
 8004244:	ea04 0602 	and.w	r6, r4, r2
 8004248:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <HAL_RCC_GetSysClockFreq+0x160>)
 800424a:	fb02 f106 	mul.w	r1, r2, r6
 800424e:	2200      	movs	r2, #0
 8004250:	fb02 f205 	mul.w	r2, r2, r5
 8004254:	440a      	add	r2, r1
 8004256:	493a      	ldr	r1, [pc, #232]	; (8004340 <HAL_RCC_GetSysClockFreq+0x160>)
 8004258:	fba5 0101 	umull	r0, r1, r5, r1
 800425c:	1853      	adds	r3, r2, r1
 800425e:	4619      	mov	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f04f 0400 	mov.w	r4, #0
 8004266:	461a      	mov	r2, r3
 8004268:	4623      	mov	r3, r4
 800426a:	f7fc fc3d 	bl	8000ae8 <__aeabi_uldivmod>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e049      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	ea03 0501 	and.w	r5, r3, r1
 800428c:	ea04 0602 	and.w	r6, r4, r2
 8004290:	4629      	mov	r1, r5
 8004292:	4632      	mov	r2, r6
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	0154      	lsls	r4, r2, #5
 800429e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042a2:	014b      	lsls	r3, r1, #5
 80042a4:	4619      	mov	r1, r3
 80042a6:	4622      	mov	r2, r4
 80042a8:	1b49      	subs	r1, r1, r5
 80042aa:	eb62 0206 	sbc.w	r2, r2, r6
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	0194      	lsls	r4, r2, #6
 80042b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042bc:	018b      	lsls	r3, r1, #6
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	eb64 0402 	sbc.w	r4, r4, r2
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	00e2      	lsls	r2, r4, #3
 80042ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042d2:	00d9      	lsls	r1, r3, #3
 80042d4:	460b      	mov	r3, r1
 80042d6:	4614      	mov	r4, r2
 80042d8:	195b      	adds	r3, r3, r5
 80042da:	eb44 0406 	adc.w	r4, r4, r6
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	02a2      	lsls	r2, r4, #10
 80042e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042ec:	0299      	lsls	r1, r3, #10
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	4621      	mov	r1, r4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	461a      	mov	r2, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	f7fc fbf2 	bl	8000ae8 <__aeabi_uldivmod>
 8004304:	4603      	mov	r3, r0
 8004306:	460c      	mov	r4, r1
 8004308:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_GetSysClockFreq+0x158>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	3301      	adds	r3, #1
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	60bb      	str	r3, [r7, #8]
      break;
 8004324:	e002      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004328:	60bb      	str	r3, [r7, #8]
      break;
 800432a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432c:	68bb      	ldr	r3, [r7, #8]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	00f42400 	.word	0x00f42400
 8004340:	017d7840 	.word	0x017d7840

08004344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCC_GetHCLKFreq+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000000 	.word	0x20000000

0800435c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004360:	f7ff fff0 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004364:	4601      	mov	r1, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0a9b      	lsrs	r3, r3, #10
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4a03      	ldr	r2, [pc, #12]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40023800 	.word	0x40023800
 8004380:	08008e80 	.word	0x08008e80

08004384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004388:	f7ff ffdc 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 800438c:	4601      	mov	r1, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0b5b      	lsrs	r3, r3, #13
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4a03      	ldr	r2, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08008e80 	.word	0x08008e80

080043ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	220f      	movs	r2, #15
 80043ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_GetClockConfig+0x5c>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0203 	and.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_RCC_GetClockConfig+0x5c>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_GetClockConfig+0x5c>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_GetClockConfig+0x5c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <HAL_RCC_GetClockConfig+0x60>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40023c00 	.word	0x40023c00

08004410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e01d      	b.n	800445e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f815 	bl	8004466 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f000 f968 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d122      	bne.n	800451e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d11b      	bne.n	800451e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0202 	mvn.w	r2, #2
 80044ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8ee 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 800450a:	e005      	b.n	8004518 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8e0 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8f1 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d122      	bne.n	8004572 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d11b      	bne.n	8004572 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0204 	mvn.w	r2, #4
 8004542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8c4 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 800455e:	e005      	b.n	800456c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8b6 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8c7 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d122      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d11b      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0208 	mvn.w	r2, #8
 8004596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f89a 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 80045b2:	e005      	b.n	80045c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f88c 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f89d 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d122      	bne.n	800461a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d11b      	bne.n	800461a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0210 	mvn.w	r2, #16
 80045ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2208      	movs	r2, #8
 80045f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f870 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 8004606:	e005      	b.n	8004614 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f862 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f873 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10e      	bne.n	8004646 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d107      	bne.n	8004646 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f06f 0201 	mvn.w	r2, #1
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc ff5b 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d10e      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d107      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f903 	bl	8004878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f838 	bl	800470e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0220 	mvn.w	r2, #32
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8cd 	bl	8004864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a40      	ldr	r2, [pc, #256]	; (8004838 <TIM_Base_SetConfig+0x114>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d00f      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <TIM_Base_SetConfig+0x118>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <TIM_Base_SetConfig+0x120>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <TIM_Base_SetConfig+0x124>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2f      	ldr	r2, [pc, #188]	; (8004838 <TIM_Base_SetConfig+0x114>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004784:	d027      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <TIM_Base_SetConfig+0x118>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d023      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <TIM_Base_SetConfig+0x120>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a29      	ldr	r2, [pc, #164]	; (8004848 <TIM_Base_SetConfig+0x124>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d017      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a28      	ldr	r2, [pc, #160]	; (800484c <TIM_Base_SetConfig+0x128>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a27      	ldr	r2, [pc, #156]	; (8004850 <TIM_Base_SetConfig+0x12c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a26      	ldr	r2, [pc, #152]	; (8004854 <TIM_Base_SetConfig+0x130>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <TIM_Base_SetConfig+0x134>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a24      	ldr	r2, [pc, #144]	; (800485c <TIM_Base_SetConfig+0x138>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a23      	ldr	r2, [pc, #140]	; (8004860 <TIM_Base_SetConfig+0x13c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <TIM_Base_SetConfig+0x114>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0xf8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <TIM_Base_SetConfig+0x124>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d103      	bne.n	8004824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	615a      	str	r2, [r3, #20]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800
 8004858:	40001800 	.word	0x40001800
 800485c:	40001c00 	.word	0x40001c00
 8004860:	40002000 	.word	0x40002000

08004864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e03f      	b.n	800491e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd f9dc 	bl	8001c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	; 0x24
 80048bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fc6d 	bl	80051b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af02      	add	r7, sp, #8
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	f040 8083 	bne.w	8004a4e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_UART_Transmit+0x2e>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e07b      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_UART_Transmit+0x40>
 8004962:	2302      	movs	r3, #2
 8004964:	e074      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2221      	movs	r2, #33	; 0x21
 8004978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800497c:	f7fd fb00 	bl	8001f80 <HAL_GetTick>
 8004980:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004996:	e042      	b.n	8004a1e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d122      	bne.n	80049f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fa76 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e042      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3302      	adds	r3, #2
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	e017      	b.n	8004a1e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	e013      	b.n	8004a1e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fa53 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e01f      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	60ba      	str	r2, [r7, #8]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1b7      	bne.n	8004998 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2140      	movs	r1, #64	; 0x40
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa3a 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d166      	bne.n	8004b40 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_UART_Receive_DMA+0x26>
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e05f      	b.n	8004b42 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_UART_Receive_DMA+0x38>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e058      	b.n	8004b42 <HAL_UART_Receive_DMA+0xea>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2222      	movs	r2, #34	; 0x22
 8004aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <HAL_UART_Receive_DMA+0xf4>)
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <HAL_UART_Receive_DMA+0xf8>)
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_UART_Receive_DMA+0xfc>)
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	2200      	movs	r2, #0
 8004ad0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f7fd fc07 	bl	80022fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b3a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08004d95 	.word	0x08004d95
 8004b50:	08004dfd 	.word	0x08004dfd
 8004b54:	08004e19 	.word	0x08004e19

08004b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x52>
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa82 	bl	80050ac <UART_Receive_IT>
      return;
 8004ba8:	e0d1      	b.n	8004d4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80b0 	beq.w	8004d12 <HAL_UART_IRQHandler+0x1ba>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x70>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a5 	beq.w	8004d12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0x90>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_UART_IRQHandler+0xb0>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	f043 0202 	orr.w	r2, r3, #2
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_UART_IRQHandler+0xd0>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	f043 0204 	orr.w	r2, r3, #4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00f      	beq.n	8004c52 <HAL_UART_IRQHandler+0xfa>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_UART_IRQHandler+0xee>
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d078      	beq.n	8004d4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_UART_IRQHandler+0x11c>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa1c 	bl	80050ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_UART_IRQHandler+0x144>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d031      	beq.n	8004d00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f965 	bl	8004f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d123      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <HAL_UART_IRQHandler+0x1fc>)
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd fb69 	bl	80023ac <HAL_DMA_Abort_IT>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d016      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cea:	4610      	mov	r0, r2
 8004cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cee:	e00e      	b.n	8004d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f845 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf6:	e00a      	b.n	8004d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f841 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfe:	e006      	b.n	8004d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f83d 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d0c:	e01e      	b.n	8004d4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0e:	bf00      	nop
    return;
 8004d10:	e01c      	b.n	8004d4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_UART_IRQHandler+0x1d6>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f952 	bl	8004fd0 <UART_Transmit_IT>
    return;
 8004d2c:	e00f      	b.n	8004d4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1f6>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f99a 	bl	800507c <UART_EndTransmit_IT>
    return;
 8004d48:	bf00      	nop
 8004d4a:	e000      	b.n	8004d4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d4c:	bf00      	nop
  }
}
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08004fa9 	.word	0x08004fa9

08004d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d11e      	bne.n	8004dee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dc4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7fc fa94 	bl	800131c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7ff ffae 	bl	8004d6c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b21      	cmp	r3, #33	; 0x21
 8004e4a:	d108      	bne.n	8004e5e <UART_DMAError+0x46>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2200      	movs	r2, #0
 8004e56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e58:	68b8      	ldr	r0, [r7, #8]
 8004e5a:	f000 f871 	bl	8004f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b22      	cmp	r3, #34	; 0x22
 8004e7e:	d108      	bne.n	8004e92 <UART_DMAError+0x7a>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e8c:	68b8      	ldr	r0, [r7, #8]
 8004e8e:	f000 f86d 	bl	8004f6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	f7ff ff6e 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebc:	e02c      	b.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d028      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x30>
 8004ecc:	f7fd f858 	bl	8001f80 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d21d      	bcs.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e00f      	b.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d0c3      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f56:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fedc 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b21      	cmp	r3, #33	; 0x21
 8004fe2:	d144      	bne.n	800506e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d11a      	bne.n	8005024 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005002:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]
 8005016:	e00e      	b.n	8005036 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]
 8005022:	e008      	b.n	8005036 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	1c59      	adds	r1, r3, #1
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6211      	str	r1, [r2, #32]
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005058:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005068:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
  }
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fe5b 	bl	8004d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b22      	cmp	r3, #34	; 0x22
 80050be:	d171      	bne.n	80051a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d123      	bne.n	8005112 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10e      	bne.n	80050f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28
 80050f4:	e029      	b.n	800514a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
 8005110:	e01b      	b.n	800514a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6858      	ldr	r0, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	1c59      	adds	r1, r3, #1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6291      	str	r1, [r2, #40]	; 0x28
 800512a:	b2c2      	uxtb	r2, r0
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e00c      	b.n	800514a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	1c58      	adds	r0, r3, #1
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	6288      	str	r0, [r1, #40]	; 0x28
 8005142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29b      	uxth	r3, r3
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4619      	mov	r1, r3
 8005158:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800515a:	2b00      	cmp	r3, #0
 800515c:	d120      	bne.n	80051a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0220 	bic.w	r2, r2, #32
 800516c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc f8c0 	bl	800131c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e002      	b.n	80051a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051f2:	f023 030c 	bic.w	r3, r3, #12
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521e:	f040 818b 	bne.w	8005538 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4ac1      	ldr	r2, [pc, #772]	; (800552c <UART_SetConfig+0x37c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d005      	beq.n	8005238 <UART_SetConfig+0x88>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4abf      	ldr	r2, [pc, #764]	; (8005530 <UART_SetConfig+0x380>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f040 80bd 	bne.w	80053b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7ff f8a4 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 800523c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	461d      	mov	r5, r3
 8005242:	f04f 0600 	mov.w	r6, #0
 8005246:	46a8      	mov	r8, r5
 8005248:	46b1      	mov	r9, r6
 800524a:	eb18 0308 	adds.w	r3, r8, r8
 800524e:	eb49 0409 	adc.w	r4, r9, r9
 8005252:	4698      	mov	r8, r3
 8005254:	46a1      	mov	r9, r4
 8005256:	eb18 0805 	adds.w	r8, r8, r5
 800525a:	eb49 0906 	adc.w	r9, r9, r6
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800526a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800526e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005272:	4688      	mov	r8, r1
 8005274:	4691      	mov	r9, r2
 8005276:	eb18 0005 	adds.w	r0, r8, r5
 800527a:	eb49 0106 	adc.w	r1, r9, r6
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	461d      	mov	r5, r3
 8005284:	f04f 0600 	mov.w	r6, #0
 8005288:	196b      	adds	r3, r5, r5
 800528a:	eb46 0406 	adc.w	r4, r6, r6
 800528e:	461a      	mov	r2, r3
 8005290:	4623      	mov	r3, r4
 8005292:	f7fb fc29 	bl	8000ae8 <__aeabi_uldivmod>
 8005296:	4603      	mov	r3, r0
 8005298:	460c      	mov	r4, r1
 800529a:	461a      	mov	r2, r3
 800529c:	4ba5      	ldr	r3, [pc, #660]	; (8005534 <UART_SetConfig+0x384>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	461d      	mov	r5, r3
 80052ac:	f04f 0600 	mov.w	r6, #0
 80052b0:	46a9      	mov	r9, r5
 80052b2:	46b2      	mov	sl, r6
 80052b4:	eb19 0309 	adds.w	r3, r9, r9
 80052b8:	eb4a 040a 	adc.w	r4, sl, sl
 80052bc:	4699      	mov	r9, r3
 80052be:	46a2      	mov	sl, r4
 80052c0:	eb19 0905 	adds.w	r9, r9, r5
 80052c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052dc:	4689      	mov	r9, r1
 80052de:	4692      	mov	sl, r2
 80052e0:	eb19 0005 	adds.w	r0, r9, r5
 80052e4:	eb4a 0106 	adc.w	r1, sl, r6
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	461d      	mov	r5, r3
 80052ee:	f04f 0600 	mov.w	r6, #0
 80052f2:	196b      	adds	r3, r5, r5
 80052f4:	eb46 0406 	adc.w	r4, r6, r6
 80052f8:	461a      	mov	r2, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	f7fb fbf4 	bl	8000ae8 <__aeabi_uldivmod>
 8005300:	4603      	mov	r3, r0
 8005302:	460c      	mov	r4, r1
 8005304:	461a      	mov	r2, r3
 8005306:	4b8b      	ldr	r3, [pc, #556]	; (8005534 <UART_SetConfig+0x384>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a86      	ldr	r2, [pc, #536]	; (8005534 <UART_SetConfig+0x384>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005328:	4498      	add	r8, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	461d      	mov	r5, r3
 800532e:	f04f 0600 	mov.w	r6, #0
 8005332:	46a9      	mov	r9, r5
 8005334:	46b2      	mov	sl, r6
 8005336:	eb19 0309 	adds.w	r3, r9, r9
 800533a:	eb4a 040a 	adc.w	r4, sl, sl
 800533e:	4699      	mov	r9, r3
 8005340:	46a2      	mov	sl, r4
 8005342:	eb19 0905 	adds.w	r9, r9, r5
 8005346:	eb4a 0a06 	adc.w	sl, sl, r6
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005356:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800535a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800535e:	4689      	mov	r9, r1
 8005360:	4692      	mov	sl, r2
 8005362:	eb19 0005 	adds.w	r0, r9, r5
 8005366:	eb4a 0106 	adc.w	r1, sl, r6
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	461d      	mov	r5, r3
 8005370:	f04f 0600 	mov.w	r6, #0
 8005374:	196b      	adds	r3, r5, r5
 8005376:	eb46 0406 	adc.w	r4, r6, r6
 800537a:	461a      	mov	r2, r3
 800537c:	4623      	mov	r3, r4
 800537e:	f7fb fbb3 	bl	8000ae8 <__aeabi_uldivmod>
 8005382:	4603      	mov	r3, r0
 8005384:	460c      	mov	r4, r1
 8005386:	461a      	mov	r2, r3
 8005388:	4b6a      	ldr	r3, [pc, #424]	; (8005534 <UART_SetConfig+0x384>)
 800538a:	fba3 1302 	umull	r1, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2164      	movs	r1, #100	; 0x64
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	3332      	adds	r3, #50	; 0x32
 800539c:	4a65      	ldr	r2, [pc, #404]	; (8005534 <UART_SetConfig+0x384>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 0207 	and.w	r2, r3, #7
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4442      	add	r2, r8
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	e26f      	b.n	8005892 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053b2:	f7fe ffd3 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 80053b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	461d      	mov	r5, r3
 80053bc:	f04f 0600 	mov.w	r6, #0
 80053c0:	46a8      	mov	r8, r5
 80053c2:	46b1      	mov	r9, r6
 80053c4:	eb18 0308 	adds.w	r3, r8, r8
 80053c8:	eb49 0409 	adc.w	r4, r9, r9
 80053cc:	4698      	mov	r8, r3
 80053ce:	46a1      	mov	r9, r4
 80053d0:	eb18 0805 	adds.w	r8, r8, r5
 80053d4:	eb49 0906 	adc.w	r9, r9, r6
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053ec:	4688      	mov	r8, r1
 80053ee:	4691      	mov	r9, r2
 80053f0:	eb18 0005 	adds.w	r0, r8, r5
 80053f4:	eb49 0106 	adc.w	r1, r9, r6
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	461d      	mov	r5, r3
 80053fe:	f04f 0600 	mov.w	r6, #0
 8005402:	196b      	adds	r3, r5, r5
 8005404:	eb46 0406 	adc.w	r4, r6, r6
 8005408:	461a      	mov	r2, r3
 800540a:	4623      	mov	r3, r4
 800540c:	f7fb fb6c 	bl	8000ae8 <__aeabi_uldivmod>
 8005410:	4603      	mov	r3, r0
 8005412:	460c      	mov	r4, r1
 8005414:	461a      	mov	r2, r3
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <UART_SetConfig+0x384>)
 8005418:	fba3 2302 	umull	r2, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	461d      	mov	r5, r3
 8005426:	f04f 0600 	mov.w	r6, #0
 800542a:	46a9      	mov	r9, r5
 800542c:	46b2      	mov	sl, r6
 800542e:	eb19 0309 	adds.w	r3, r9, r9
 8005432:	eb4a 040a 	adc.w	r4, sl, sl
 8005436:	4699      	mov	r9, r3
 8005438:	46a2      	mov	sl, r4
 800543a:	eb19 0905 	adds.w	r9, r9, r5
 800543e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800544e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005452:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005456:	4689      	mov	r9, r1
 8005458:	4692      	mov	sl, r2
 800545a:	eb19 0005 	adds.w	r0, r9, r5
 800545e:	eb4a 0106 	adc.w	r1, sl, r6
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	461d      	mov	r5, r3
 8005468:	f04f 0600 	mov.w	r6, #0
 800546c:	196b      	adds	r3, r5, r5
 800546e:	eb46 0406 	adc.w	r4, r6, r6
 8005472:	461a      	mov	r2, r3
 8005474:	4623      	mov	r3, r4
 8005476:	f7fb fb37 	bl	8000ae8 <__aeabi_uldivmod>
 800547a:	4603      	mov	r3, r0
 800547c:	460c      	mov	r4, r1
 800547e:	461a      	mov	r2, r3
 8005480:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <UART_SetConfig+0x384>)
 8005482:	fba3 1302 	umull	r1, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2164      	movs	r1, #100	; 0x64
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	3332      	adds	r3, #50	; 0x32
 8005494:	4a27      	ldr	r2, [pc, #156]	; (8005534 <UART_SetConfig+0x384>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054a2:	4498      	add	r8, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	461d      	mov	r5, r3
 80054a8:	f04f 0600 	mov.w	r6, #0
 80054ac:	46a9      	mov	r9, r5
 80054ae:	46b2      	mov	sl, r6
 80054b0:	eb19 0309 	adds.w	r3, r9, r9
 80054b4:	eb4a 040a 	adc.w	r4, sl, sl
 80054b8:	4699      	mov	r9, r3
 80054ba:	46a2      	mov	sl, r4
 80054bc:	eb19 0905 	adds.w	r9, r9, r5
 80054c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80054c4:	f04f 0100 	mov.w	r1, #0
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054d8:	4689      	mov	r9, r1
 80054da:	4692      	mov	sl, r2
 80054dc:	eb19 0005 	adds.w	r0, r9, r5
 80054e0:	eb4a 0106 	adc.w	r1, sl, r6
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	461d      	mov	r5, r3
 80054ea:	f04f 0600 	mov.w	r6, #0
 80054ee:	196b      	adds	r3, r5, r5
 80054f0:	eb46 0406 	adc.w	r4, r6, r6
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	f7fb faf6 	bl	8000ae8 <__aeabi_uldivmod>
 80054fc:	4603      	mov	r3, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	461a      	mov	r2, r3
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <UART_SetConfig+0x384>)
 8005504:	fba3 1302 	umull	r1, r3, r3, r2
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	2164      	movs	r1, #100	; 0x64
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	3332      	adds	r3, #50	; 0x32
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <UART_SetConfig+0x384>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	f003 0207 	and.w	r2, r3, #7
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4442      	add	r2, r8
 8005528:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800552a:	e1b2      	b.n	8005892 <UART_SetConfig+0x6e2>
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4ad7      	ldr	r2, [pc, #860]	; (800589c <UART_SetConfig+0x6ec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d005      	beq.n	800554e <UART_SetConfig+0x39e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4ad6      	ldr	r2, [pc, #856]	; (80058a0 <UART_SetConfig+0x6f0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	f040 80d1 	bne.w	80056f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800554e:	f7fe ff19 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 8005552:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	469a      	mov	sl, r3
 8005558:	f04f 0b00 	mov.w	fp, #0
 800555c:	46d0      	mov	r8, sl
 800555e:	46d9      	mov	r9, fp
 8005560:	eb18 0308 	adds.w	r3, r8, r8
 8005564:	eb49 0409 	adc.w	r4, r9, r9
 8005568:	4698      	mov	r8, r3
 800556a:	46a1      	mov	r9, r4
 800556c:	eb18 080a 	adds.w	r8, r8, sl
 8005570:	eb49 090b 	adc.w	r9, r9, fp
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005580:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005584:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005588:	4688      	mov	r8, r1
 800558a:	4691      	mov	r9, r2
 800558c:	eb1a 0508 	adds.w	r5, sl, r8
 8005590:	eb4b 0609 	adc.w	r6, fp, r9
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4619      	mov	r1, r3
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	f04f 0400 	mov.w	r4, #0
 80055a6:	0094      	lsls	r4, r2, #2
 80055a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ac:	008b      	lsls	r3, r1, #2
 80055ae:	461a      	mov	r2, r3
 80055b0:	4623      	mov	r3, r4
 80055b2:	4628      	mov	r0, r5
 80055b4:	4631      	mov	r1, r6
 80055b6:	f7fb fa97 	bl	8000ae8 <__aeabi_uldivmod>
 80055ba:	4603      	mov	r3, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	461a      	mov	r2, r3
 80055c0:	4bb8      	ldr	r3, [pc, #736]	; (80058a4 <UART_SetConfig+0x6f4>)
 80055c2:	fba3 2302 	umull	r2, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	469b      	mov	fp, r3
 80055d0:	f04f 0c00 	mov.w	ip, #0
 80055d4:	46d9      	mov	r9, fp
 80055d6:	46e2      	mov	sl, ip
 80055d8:	eb19 0309 	adds.w	r3, r9, r9
 80055dc:	eb4a 040a 	adc.w	r4, sl, sl
 80055e0:	4699      	mov	r9, r3
 80055e2:	46a2      	mov	sl, r4
 80055e4:	eb19 090b 	adds.w	r9, r9, fp
 80055e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005600:	4689      	mov	r9, r1
 8005602:	4692      	mov	sl, r2
 8005604:	eb1b 0509 	adds.w	r5, fp, r9
 8005608:	eb4c 060a 	adc.w	r6, ip, sl
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	0094      	lsls	r4, r2, #2
 8005620:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	461a      	mov	r2, r3
 8005628:	4623      	mov	r3, r4
 800562a:	4628      	mov	r0, r5
 800562c:	4631      	mov	r1, r6
 800562e:	f7fb fa5b 	bl	8000ae8 <__aeabi_uldivmod>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	461a      	mov	r2, r3
 8005638:	4b9a      	ldr	r3, [pc, #616]	; (80058a4 <UART_SetConfig+0x6f4>)
 800563a:	fba3 1302 	umull	r1, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2164      	movs	r1, #100	; 0x64
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	3332      	adds	r3, #50	; 0x32
 800564c:	4a95      	ldr	r2, [pc, #596]	; (80058a4 <UART_SetConfig+0x6f4>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005658:	4498      	add	r8, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	469b      	mov	fp, r3
 800565e:	f04f 0c00 	mov.w	ip, #0
 8005662:	46d9      	mov	r9, fp
 8005664:	46e2      	mov	sl, ip
 8005666:	eb19 0309 	adds.w	r3, r9, r9
 800566a:	eb4a 040a 	adc.w	r4, sl, sl
 800566e:	4699      	mov	r9, r3
 8005670:	46a2      	mov	sl, r4
 8005672:	eb19 090b 	adds.w	r9, r9, fp
 8005676:	eb4a 0a0c 	adc.w	sl, sl, ip
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005686:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800568a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800568e:	4689      	mov	r9, r1
 8005690:	4692      	mov	sl, r2
 8005692:	eb1b 0509 	adds.w	r5, fp, r9
 8005696:	eb4c 060a 	adc.w	r6, ip, sl
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4619      	mov	r1, r3
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	f04f 0400 	mov.w	r4, #0
 80056ac:	0094      	lsls	r4, r2, #2
 80056ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056b2:	008b      	lsls	r3, r1, #2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	4631      	mov	r1, r6
 80056bc:	f7fb fa14 	bl	8000ae8 <__aeabi_uldivmod>
 80056c0:	4603      	mov	r3, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b77      	ldr	r3, [pc, #476]	; (80058a4 <UART_SetConfig+0x6f4>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	3332      	adds	r3, #50	; 0x32
 80056da:	4a72      	ldr	r2, [pc, #456]	; (80058a4 <UART_SetConfig+0x6f4>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4442      	add	r2, r8
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	e0d0      	b.n	8005892 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe fe34 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 80056f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	469a      	mov	sl, r3
 80056fa:	f04f 0b00 	mov.w	fp, #0
 80056fe:	46d0      	mov	r8, sl
 8005700:	46d9      	mov	r9, fp
 8005702:	eb18 0308 	adds.w	r3, r8, r8
 8005706:	eb49 0409 	adc.w	r4, r9, r9
 800570a:	4698      	mov	r8, r3
 800570c:	46a1      	mov	r9, r4
 800570e:	eb18 080a 	adds.w	r8, r8, sl
 8005712:	eb49 090b 	adc.w	r9, r9, fp
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005722:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005726:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800572a:	4688      	mov	r8, r1
 800572c:	4691      	mov	r9, r2
 800572e:	eb1a 0508 	adds.w	r5, sl, r8
 8005732:	eb4b 0609 	adc.w	r6, fp, r9
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	f04f 0400 	mov.w	r4, #0
 8005748:	0094      	lsls	r4, r2, #2
 800574a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800574e:	008b      	lsls	r3, r1, #2
 8005750:	461a      	mov	r2, r3
 8005752:	4623      	mov	r3, r4
 8005754:	4628      	mov	r0, r5
 8005756:	4631      	mov	r1, r6
 8005758:	f7fb f9c6 	bl	8000ae8 <__aeabi_uldivmod>
 800575c:	4603      	mov	r3, r0
 800575e:	460c      	mov	r4, r1
 8005760:	461a      	mov	r2, r3
 8005762:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <UART_SetConfig+0x6f4>)
 8005764:	fba3 2302 	umull	r2, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	469b      	mov	fp, r3
 8005772:	f04f 0c00 	mov.w	ip, #0
 8005776:	46d9      	mov	r9, fp
 8005778:	46e2      	mov	sl, ip
 800577a:	eb19 0309 	adds.w	r3, r9, r9
 800577e:	eb4a 040a 	adc.w	r4, sl, sl
 8005782:	4699      	mov	r9, r3
 8005784:	46a2      	mov	sl, r4
 8005786:	eb19 090b 	adds.w	r9, r9, fp
 800578a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800579a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800579e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057a2:	4689      	mov	r9, r1
 80057a4:	4692      	mov	sl, r2
 80057a6:	eb1b 0509 	adds.w	r5, fp, r9
 80057aa:	eb4c 060a 	adc.w	r6, ip, sl
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	0094      	lsls	r4, r2, #2
 80057c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057c6:	008b      	lsls	r3, r1, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	4631      	mov	r1, r6
 80057d0:	f7fb f98a 	bl	8000ae8 <__aeabi_uldivmod>
 80057d4:	4603      	mov	r3, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	461a      	mov	r2, r3
 80057da:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <UART_SetConfig+0x6f4>)
 80057dc:	fba3 1302 	umull	r1, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	2164      	movs	r1, #100	; 0x64
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	3332      	adds	r3, #50	; 0x32
 80057ee:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <UART_SetConfig+0x6f4>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057fa:	4498      	add	r8, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	469b      	mov	fp, r3
 8005800:	f04f 0c00 	mov.w	ip, #0
 8005804:	46d9      	mov	r9, fp
 8005806:	46e2      	mov	sl, ip
 8005808:	eb19 0309 	adds.w	r3, r9, r9
 800580c:	eb4a 040a 	adc.w	r4, sl, sl
 8005810:	4699      	mov	r9, r3
 8005812:	46a2      	mov	sl, r4
 8005814:	eb19 090b 	adds.w	r9, r9, fp
 8005818:	eb4a 0a0c 	adc.w	sl, sl, ip
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005828:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800582c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005830:	4689      	mov	r9, r1
 8005832:	4692      	mov	sl, r2
 8005834:	eb1b 0509 	adds.w	r5, fp, r9
 8005838:	eb4c 060a 	adc.w	r6, ip, sl
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f04f 0400 	mov.w	r4, #0
 800584e:	0094      	lsls	r4, r2, #2
 8005850:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	461a      	mov	r2, r3
 8005858:	4623      	mov	r3, r4
 800585a:	4628      	mov	r0, r5
 800585c:	4631      	mov	r1, r6
 800585e:	f7fb f943 	bl	8000ae8 <__aeabi_uldivmod>
 8005862:	4603      	mov	r3, r0
 8005864:	460c      	mov	r4, r1
 8005866:	461a      	mov	r2, r3
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <UART_SetConfig+0x6f4>)
 800586a:	fba3 1302 	umull	r1, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2164      	movs	r1, #100	; 0x64
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	3332      	adds	r3, #50	; 0x32
 800587c:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <UART_SetConfig+0x6f4>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4442      	add	r2, r8
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	e7ff      	b.n	8005892 <UART_SetConfig+0x6e2>
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589c:	40011000 	.word	0x40011000
 80058a0:	40011400 	.word	0x40011400
 80058a4:	51eb851f 	.word	0x51eb851f

080058a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ba:	2b84      	cmp	r3, #132	; 0x84
 80058bc:	d005      	beq.n	80058ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	3303      	adds	r3, #3
 80058c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058ca:	68fb      	ldr	r3, [r7, #12]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058de:	f3ef 8305 	mrs	r3, IPSR
 80058e2:	607b      	str	r3, [r7, #4]
  return(result);
 80058e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005900:	f001 f8a0 	bl	8006a44 <vTaskStartScheduler>
  
  return osOK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	bd80      	pop	{r7, pc}

0800590a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800590a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590c:	b089      	sub	sp, #36	; 0x24
 800590e:	af04      	add	r7, sp, #16
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <osThreadCreate+0x54>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01c      	beq.n	800595e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685c      	ldr	r4, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681d      	ldr	r5, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691e      	ldr	r6, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffb6 	bl	80058a8 <makeFreeRtosPriority>
 800593c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	9100      	str	r1, [sp, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	4632      	mov	r2, r6
 8005950:	4629      	mov	r1, r5
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fee7 	bl	8006726 <xTaskCreateStatic>
 8005958:	4603      	mov	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e01c      	b.n	8005998 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685c      	ldr	r4, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800596a:	b29e      	uxth	r6, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff ff98 	bl	80058a8 <makeFreeRtosPriority>
 8005978:	4602      	mov	r2, r0
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	9200      	str	r2, [sp, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	4632      	mov	r2, r6
 8005986:	4629      	mov	r1, r5
 8005988:	4620      	mov	r0, r4
 800598a:	f000 ff26 	bl	80067da <xTaskCreate>
 800598e:	4603      	mov	r3, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059a2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80059a2:	b590      	push	{r4, r7, lr}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af02      	add	r7, sp, #8
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <osMessageCreate+0x38>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68dc      	ldr	r4, [r3, #12]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	4623      	mov	r3, r4
 80059d2:	f000 f9df 	bl	8005d94 <xQueueGenericCreateStatic>
 80059d6:	4603      	mov	r3, r0
 80059d8:	e008      	b.n	80059ec <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	4619      	mov	r1, r3
 80059e6:	f000 fa48 	bl	8005e7a <xQueueGenericCreate>
 80059ea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <osMessagePut+0x1e>
    ticks = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005a12:	f7ff ff61 	bl	80058d8 <inHandlerMode>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d018      	beq.n	8005a4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a1c:	f107 0210 	add.w	r2, r7, #16
 8005a20:	f107 0108 	add.w	r1, r7, #8
 8005a24:	2300      	movs	r3, #0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fb80 	bl	800612c <xQueueGenericSendFromISR>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d001      	beq.n	8005a36 <osMessagePut+0x42>
      return osErrorOS;
 8005a32:	23ff      	movs	r3, #255	; 0xff
 8005a34:	e018      	b.n	8005a68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d014      	beq.n	8005a66 <osMessagePut+0x72>
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <osMessagePut+0x7c>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	e00b      	b.n	8005a66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005a4e:	f107 0108 	add.w	r1, r7, #8
 8005a52:	2300      	movs	r3, #0
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa6e 	bl	8005f38 <xQueueGenericSend>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <osMessagePut+0x72>
      return osErrorOS;
 8005a62:	23ff      	movs	r3, #255	; 0xff
 8005a64:	e000      	b.n	8005a68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b08b      	sub	sp, #44	; 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	617b      	str	r3, [r7, #20]
    return event;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	461c      	mov	r4, r3
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005aa2:	e054      	b.n	8005b4e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d103      	bne.n	8005abc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aba:	e009      	b.n	8005ad0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <osMessageGet+0x5c>
      ticks = 1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ad0:	f7ff ff02 	bl	80058d8 <inHandlerMode>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01c      	beq.n	8005b14 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ada:	f107 0220 	add.w	r2, r7, #32
 8005ade:	f107 0314 	add.w	r3, r7, #20
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68b8      	ldr	r0, [r7, #8]
 8005ae8:	f000 fc90 	bl	800640c <xQueueReceiveFromISR>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005af2:	2310      	movs	r3, #16
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e001      	b.n	8005afc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01d      	beq.n	8005b3e <osMessageGet+0xca>
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <osMessageGet+0xe4>)
 8005b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	e014      	b.n	8005b3e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	3304      	adds	r3, #4
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	f000 fb98 	bl	8006254 <xQueueReceive>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d102      	bne.n	8005b30 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e006      	b.n	8005b3e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <osMessageGet+0xc6>
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <osMessageGet+0xc8>
 8005b3a:	2340      	movs	r3, #64	; 0x40
 8005b3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	461c      	mov	r4, r3
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	372c      	adds	r7, #44	; 0x2c
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0208 	add.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0208 	add.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d103      	bne.n	8005c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e00c      	b.n	8005c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3308      	adds	r3, #8
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e002      	b.n	8005c2c <vListInsert+0x2e>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d2f6      	bcs.n	8005c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6892      	ldr	r2, [r2, #8]
 8005c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6852      	ldr	r2, [r2, #4]
 8005c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d103      	bne.n	8005ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	e7fe      	b.n	8005cea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005cec:	f001 fcce 	bl	800768c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	; 0xff
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d114      	bne.n	8005d6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01a      	beq.n	8005d80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f8b6 	bl	8006ec0 <xTaskRemoveFromEventList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d012      	beq.n	8005d80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <xQueueGenericReset+0xcc>)
 8005d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	e009      	b.n	8005d80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fef3 	bl	8005b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff feee 	bl	8005b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d80:	f001 fcb2 	bl	80076e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <xQueueGenericCreateStatic+0x28>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	e7fe      	b.n	8005dba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <xQueueGenericCreateStatic+0x42>
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	e7fe      	b.n	8005dd4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <xQueueGenericCreateStatic+0x4e>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <xQueueGenericCreateStatic+0x52>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericCreateStatic+0x54>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <xQueueGenericCreateStatic+0x6c>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	e7fe      	b.n	8005dfe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <xQueueGenericCreateStatic+0x78>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xQueueGenericCreateStatic+0x7c>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <xQueueGenericCreateStatic+0x7e>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <xQueueGenericCreateStatic+0x96>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e2a:	2348      	movs	r3, #72	; 0x48
 8005e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b48      	cmp	r3, #72	; 0x48
 8005e32:	d009      	beq.n	8005e48 <xQueueGenericCreateStatic+0xb4>
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e7fe      	b.n	8005e46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f844 	bl	8005ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3730      	adds	r7, #48	; 0x30
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	4613      	mov	r3, r2
 8005e86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <xQueueGenericCreate+0x28>
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e004      	b.n	8005eb8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	3348      	adds	r3, #72	; 0x48
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 fcff 	bl	80078c0 <pvPortMalloc>
 8005ec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d011      	beq.n	8005eee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	3348      	adds	r3, #72	; 0x48
 8005ed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005edc:	79fa      	ldrb	r2, [r7, #7]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f805 	bl	8005ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005eee:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d103      	bne.n	8005f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e002      	b.n	8005f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f26:	2101      	movs	r1, #1
 8005f28:	69b8      	ldr	r0, [r7, #24]
 8005f2a:	f7ff fecb 	bl	8005cc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08e      	sub	sp, #56	; 0x38
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f46:	2300      	movs	r3, #0
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <xQueueGenericSend+0x30>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	e7fe      	b.n	8005f66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <xQueueGenericSend+0x3e>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <xQueueGenericSend+0x42>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericSend+0x44>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <xQueueGenericSend+0x5c>
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	e7fe      	b.n	8005f92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d103      	bne.n	8005fa2 <xQueueGenericSend+0x6a>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <xQueueGenericSend+0x6e>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <xQueueGenericSend+0x70>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <xQueueGenericSend+0x88>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e7fe      	b.n	8005fbe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc0:	f001 f934 	bl	800722c <xTaskGetSchedulerState>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <xQueueGenericSend+0x98>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <xQueueGenericSend+0x9c>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <xQueueGenericSend+0x9e>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <xQueueGenericSend+0xb6>
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	e7fe      	b.n	8005fec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fee:	f001 fb4d 	bl	800768c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <xQueueGenericSend+0xcc>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d129      	bne.n	8006058 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600a:	f000 fa7c 	bl	8006506 <prvCopyDataToQueue>
 800600e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	3324      	adds	r3, #36	; 0x24
 800601c:	4618      	mov	r0, r3
 800601e:	f000 ff4f 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006028:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <xQueueGenericSend+0x1f0>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	e00a      	b.n	8006050 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006040:	4b39      	ldr	r3, [pc, #228]	; (8006128 <xQueueGenericSend+0x1f0>)
 8006042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006050:	f001 fb4a 	bl	80076e8 <vPortExitCritical>
				return pdPASS;
 8006054:	2301      	movs	r3, #1
 8006056:	e063      	b.n	8006120 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800605e:	f001 fb43 	bl	80076e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006062:	2300      	movs	r3, #0
 8006064:	e05c      	b.n	8006120 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	4618      	mov	r0, r3
 8006072:	f000 ff87 	bl	8006f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800607a:	f001 fb35 	bl	80076e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800607e:	f000 fd3f 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006082:	f001 fb03 	bl	800768c <vPortEnterCritical>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d103      	bne.n	800609c <xQueueGenericSend+0x164>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d103      	bne.n	80060b2 <xQueueGenericSend+0x17a>
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b2:	f001 fb19 	bl	80076e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b6:	1d3a      	adds	r2, r7, #4
 80060b8:	f107 0314 	add.w	r3, r7, #20
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 ff76 	bl	8006fb0 <xTaskCheckForTimeOut>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d124      	bne.n	8006114 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060cc:	f000 fb13 	bl	80066f6 <prvIsQueueFull>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	3310      	adds	r3, #16
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 feca 	bl	8006e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e6:	f000 fa9e 	bl	8006626 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060ea:	f000 fd17 	bl	8006b1c <xTaskResumeAll>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f47f af7c 	bne.w	8005fee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <xQueueGenericSend+0x1f0>)
 80060f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	e772      	b.n	8005fee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610a:	f000 fa8c 	bl	8006626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800610e:	f000 fd05 	bl	8006b1c <xTaskResumeAll>
 8006112:	e76c      	b.n	8005fee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006116:	f000 fa86 	bl	8006626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800611a:	f000 fcff 	bl	8006b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800611e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006120:	4618      	mov	r0, r3
 8006122:	3738      	adds	r7, #56	; 0x38
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08e      	sub	sp, #56	; 0x38
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <xQueueGenericSendFromISR+0x2c>
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	e7fe      	b.n	8006156 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <xQueueGenericSendFromISR+0x3a>
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <xQueueGenericSendFromISR+0x3e>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <xQueueGenericSendFromISR+0x40>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <xQueueGenericSendFromISR+0x58>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	e7fe      	b.n	8006182 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d103      	bne.n	8006192 <xQueueGenericSendFromISR+0x66>
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <xQueueGenericSendFromISR+0x6a>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <xQueueGenericSendFromISR+0x6c>
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <xQueueGenericSendFromISR+0x84>
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061b0:	f001 fb48 	bl	8007844 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061b4:	f3ef 8211 	mrs	r2, BASEPRI
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	61ba      	str	r2, [r7, #24]
 80061ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <xQueueGenericSendFromISR+0xb6>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d12c      	bne.n	800623c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f2:	f000 f988 	bl	8006506 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d112      	bne.n	8006226 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d016      	beq.n	8006236 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fe57 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00e      	beq.n	8006236 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e007      	b.n	8006236 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800622a:	3301      	adds	r3, #1
 800622c:	b2db      	uxtb	r3, r3
 800622e:	b25a      	sxtb	r2, r3
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006236:	2301      	movs	r3, #1
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800623a:	e001      	b.n	8006240 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800623c:	2300      	movs	r3, #0
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800624c:	4618      	mov	r0, r3
 800624e:	3738      	adds	r7, #56	; 0x38
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08c      	sub	sp, #48	; 0x30
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <xQueueReceive+0x2e>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	623b      	str	r3, [r7, #32]
 8006280:	e7fe      	b.n	8006280 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <xQueueReceive+0x3c>
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <xQueueReceive+0x40>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <xQueueReceive+0x42>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <xQueueReceive+0x5a>
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e7fe      	b.n	80062ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ae:	f000 ffbd 	bl	800722c <xTaskGetSchedulerState>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <xQueueReceive+0x6a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueReceive+0x6e>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueReceive+0x70>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <xQueueReceive+0x88>
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e7fe      	b.n	80062da <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062dc:	f001 f9d6 	bl	800768c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01f      	beq.n	800632c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f0:	f000 f973 	bl	80065da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	3310      	adds	r3, #16
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fdd9 	bl	8006ec0 <xTaskRemoveFromEventList>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006314:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <xQueueReceive+0x1b4>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006324:	f001 f9e0 	bl	80076e8 <vPortExitCritical>
				return pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	e069      	b.n	8006400 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006332:	f001 f9d9 	bl	80076e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006336:	2300      	movs	r3, #0
 8006338:	e062      	b.n	8006400 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fe1d 	bl	8006f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800634e:	f001 f9cb 	bl	80076e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006352:	f000 fbd5 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006356:	f001 f999 	bl	800768c <vPortEnterCritical>
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006360:	b25b      	sxtb	r3, r3
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d103      	bne.n	8006370 <xQueueReceive+0x11c>
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006376:	b25b      	sxtb	r3, r3
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d103      	bne.n	8006386 <xQueueReceive+0x132>
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006386:	f001 f9af 	bl	80076e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800638a:	1d3a      	adds	r2, r7, #4
 800638c:	f107 0310 	add.w	r3, r7, #16
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fe0c 	bl	8006fb0 <xTaskCheckForTimeOut>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d123      	bne.n	80063e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800639e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a0:	f000 f993 	bl	80066ca <prvIsQueueEmpty>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d017      	beq.n	80063da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fd60 	bl	8006e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ba:	f000 f934 	bl	8006626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063be:	f000 fbad 	bl	8006b1c <xTaskResumeAll>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d189      	bne.n	80062dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <xQueueReceive+0x1b4>)
 80063ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	e780      	b.n	80062dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063dc:	f000 f923 	bl	8006626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063e0:	f000 fb9c 	bl	8006b1c <xTaskResumeAll>
 80063e4:	e77a      	b.n	80062dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e8:	f000 f91d 	bl	8006626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ec:	f000 fb96 	bl	8006b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f2:	f000 f96a 	bl	80066ca <prvIsQueueEmpty>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f43f af6f 	beq.w	80062dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006400:	4618      	mov	r0, r3
 8006402:	3730      	adds	r7, #48	; 0x30
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08e      	sub	sp, #56	; 0x38
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <xQueueReceiveFromISR+0x2a>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	623b      	str	r3, [r7, #32]
 8006434:	e7fe      	b.n	8006434 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <xQueueReceiveFromISR+0x38>
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <xQueueReceiveFromISR+0x3c>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <xQueueReceiveFromISR+0x3e>
 8006448:	2300      	movs	r3, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <xQueueReceiveFromISR+0x56>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e7fe      	b.n	8006460 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006462:	f001 f9ef 	bl	8007844 <vPortValidateInterruptPriority>
	__asm volatile
 8006466:	f3ef 8211 	mrs	r2, BASEPRI
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	61ba      	str	r2, [r7, #24]
 800647c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800647e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d02f      	beq.n	80064ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800649c:	f000 f89d 	bl	80065da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d112      	bne.n	80064d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d016      	beq.n	80064e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	3310      	adds	r3, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fcfe 	bl	8006ec0 <xTaskRemoveFromEventList>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e007      	b.n	80064e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064dc:	3301      	adds	r3, #1
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	b25a      	sxtb	r2, r3
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80064e8:	2301      	movs	r3, #1
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
 80064ec:	e001      	b.n	80064f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3738      	adds	r7, #56	; 0x38
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d14d      	bne.n	80065c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fe99 	bl	8007268 <xTaskPriorityDisinherit>
 8006536:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
 800653e:	e043      	b.n	80065c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d119      	bne.n	800657a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6858      	ldr	r0, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	461a      	mov	r2, r3
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	f001 fbb5 	bl	8007cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d32b      	bcc.n	80065c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	605a      	str	r2, [r3, #4]
 8006578:	e026      	b.n	80065c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68d8      	ldr	r0, [r3, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	461a      	mov	r2, r3
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	f001 fb9b 	bl	8007cc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	425b      	negs	r3, r3
 8006594:	441a      	add	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d207      	bcs.n	80065b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	425b      	negs	r3, r3
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d105      	bne.n	80065c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065d0:	697b      	ldr	r3, [r7, #20]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d018      	beq.n	800661e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	d303      	bcc.n	800660e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68d9      	ldr	r1, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	461a      	mov	r2, r3
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f001 fb51 	bl	8007cc0 <memcpy>
	}
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800662e:	f001 f82d 	bl	800768c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006638:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800663a:	e011      	b.n	8006660 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d012      	beq.n	800666a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fc39 	bl	8006ec0 <xTaskRemoveFromEventList>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006654:	f000 fd0c 	bl	8007070 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	3b01      	subs	r3, #1
 800665c:	b2db      	uxtb	r3, r3
 800665e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dce9      	bgt.n	800663c <prvUnlockQueue+0x16>
 8006668:	e000      	b.n	800666c <prvUnlockQueue+0x46>
					break;
 800666a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22ff      	movs	r2, #255	; 0xff
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006674:	f001 f838 	bl	80076e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006678:	f001 f808 	bl	800768c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006682:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006684:	e011      	b.n	80066aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d012      	beq.n	80066b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3310      	adds	r3, #16
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fc14 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800669e:	f000 fce7 	bl	8007070 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dce9      	bgt.n	8006686 <prvUnlockQueue+0x60>
 80066b2:	e000      	b.n	80066b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	22ff      	movs	r2, #255	; 0xff
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066be:	f001 f813 	bl	80076e8 <vPortExitCritical>
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066d2:	f000 ffdb 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e001      	b.n	80066e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066e8:	f000 fffe 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066fe:	f000 ffc5 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	429a      	cmp	r2, r3
 800670c:	d102      	bne.n	8006714 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e001      	b.n	8006718 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006718:	f000 ffe6 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006726:	b580      	push	{r7, lr}
 8006728:	b08e      	sub	sp, #56	; 0x38
 800672a:	af04      	add	r7, sp, #16
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <xTaskCreateStatic+0x28>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	623b      	str	r3, [r7, #32]
 800674c:	e7fe      	b.n	800674c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <xTaskCreateStatic+0x42>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e7fe      	b.n	8006766 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006768:	2354      	movs	r3, #84	; 0x54
 800676a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b54      	cmp	r3, #84	; 0x54
 8006770:	d009      	beq.n	8006786 <xTaskCreateStatic+0x60>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	e7fe      	b.n	8006784 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006786:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01e      	beq.n	80067cc <xTaskCreateStatic+0xa6>
 800678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067a6:	2300      	movs	r3, #0
 80067a8:	9303      	str	r3, [sp, #12]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	9302      	str	r3, [sp, #8]
 80067ae:	f107 0314 	add.w	r3, r7, #20
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f850 	bl	8006864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067c6:	f000 f8d3 	bl	8006970 <prvAddNewTaskToReadyList>
 80067ca:	e001      	b.n	80067d0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067d0:	697b      	ldr	r3, [r7, #20]
	}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b08c      	sub	sp, #48	; 0x30
 80067de:	af04      	add	r7, sp, #16
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f866 	bl	80078c0 <pvPortMalloc>
 80067f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067fc:	2054      	movs	r0, #84	; 0x54
 80067fe:	f001 f85f 	bl	80078c0 <pvPortMalloc>
 8006802:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
 8006810:	e005      	b.n	800681e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f001 f916 	bl	8007a44 <vPortFree>
 8006818:	e001      	b.n	800681e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	2300      	movs	r3, #0
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f80e 	bl	8006864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006848:	69f8      	ldr	r0, [r7, #28]
 800684a:	f000 f891 	bl	8006970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800684e:	2301      	movs	r3, #1
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	e002      	b.n	800685a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295
 8006858:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800685a:	69bb      	ldr	r3, [r7, #24]
	}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800687c:	3b01      	subs	r3, #1
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <prvInitialiseNewTask+0x46>
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e7fe      	b.n	80068a8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01f      	beq.n	80068f0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e012      	b.n	80068dc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	3334      	adds	r3, #52	; 0x34
 80068c6:	460a      	mov	r2, r1
 80068c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3301      	adds	r3, #1
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	d9e9      	bls.n	80068b6 <prvInitialiseNewTask+0x52>
 80068e2:	e000      	b.n	80068e6 <prvInitialiseNewTask+0x82>
			{
				break;
 80068e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ee:	e003      	b.n	80068f8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b06      	cmp	r3, #6
 80068fc:	d901      	bls.n	8006902 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fe:	2306      	movs	r3, #6
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	3304      	adds	r3, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff f93f 	bl	8005b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	3318      	adds	r3, #24
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff f93a 	bl	8005b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	f1c3 0207 	rsb	r2, r3, #7
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2200      	movs	r2, #0
 8006942:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	69b8      	ldr	r0, [r7, #24]
 8006952:	f000 fd73 	bl	800743c <pxPortInitialiseStack>
 8006956:	4602      	mov	r2, r0
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006968:	bf00      	nop
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006978:	f000 fe88 	bl	800768c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800697c:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <prvAddNewTaskToReadyList+0xb8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a29      	ldr	r2, [pc, #164]	; (8006a28 <prvAddNewTaskToReadyList+0xb8>)
 8006984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006986:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <prvAddNewTaskToReadyList+0xbc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800698e:	4a27      	ldr	r2, [pc, #156]	; (8006a2c <prvAddNewTaskToReadyList+0xbc>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <prvAddNewTaskToReadyList+0xb8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d110      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800699c:	f000 fb8c 	bl	80070b8 <prvInitialiseTaskLists>
 80069a0:	e00d      	b.n	80069be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <prvAddNewTaskToReadyList+0xc0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069aa:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <prvAddNewTaskToReadyList+0xbc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d802      	bhi.n	80069be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <prvAddNewTaskToReadyList+0xbc>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 80069c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	2201      	movs	r2, #1
 80069ce:	409a      	lsls	r2, r3
 80069d0:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <prvAddNewTaskToReadyList+0xcc>)
 80069e8:	441a      	add	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7ff f8e0 	bl	8005bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069f6:	f000 fe77 	bl	80076e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <prvAddNewTaskToReadyList+0xc0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <prvAddNewTaskToReadyList+0xbc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d207      	bcs.n	8006a20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	200003f0 	.word	0x200003f0
 8006a2c:	200002f0 	.word	0x200002f0
 8006a30:	200003fc 	.word	0x200003fc
 8006a34:	2000040c 	.word	0x2000040c
 8006a38:	200003f8 	.word	0x200003f8
 8006a3c:	200002f4 	.word	0x200002f4
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a52:	463a      	mov	r2, r7
 8006a54:	1d39      	adds	r1, r7, #4
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa fa20 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	9202      	str	r2, [sp, #8]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	460a      	mov	r2, r1
 8006a72:	491d      	ldr	r1, [pc, #116]	; (8006ae8 <vTaskStartScheduler+0xa4>)
 8006a74:	481d      	ldr	r0, [pc, #116]	; (8006aec <vTaskStartScheduler+0xa8>)
 8006a76:	f7ff fe56 	bl	8006726 <xTaskCreateStatic>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <vTaskStartScheduler+0xac>)
 8006a7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a80:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <vTaskStartScheduler+0xac>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e001      	b.n	8006a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d115      	bne.n	8006ac4 <vTaskStartScheduler+0x80>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <vTaskStartScheduler+0xb0>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <vTaskStartScheduler+0xb4>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <vTaskStartScheduler+0xb8>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006abe:	f000 fd47 	bl	8007550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ac2:	e00d      	b.n	8006ae0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d109      	bne.n	8006ae0 <vTaskStartScheduler+0x9c>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e7fe      	b.n	8006ade <vTaskStartScheduler+0x9a>
}
 8006ae0:	bf00      	nop
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08008e68 	.word	0x08008e68
 8006aec:	08007089 	.word	0x08007089
 8006af0:	20000414 	.word	0x20000414
 8006af4:	20000410 	.word	0x20000410
 8006af8:	200003fc 	.word	0x200003fc
 8006afc:	200003f4 	.word	0x200003f4

08006b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000418 	.word	0x20000418

08006b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b2a:	4b41      	ldr	r3, [pc, #260]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <xTaskResumeAll+0x2a>
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	e7fe      	b.n	8006b44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b46:	f000 fda1 	bl	800768c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a37      	ldr	r2, [pc, #220]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d161      	bne.n	8006c20 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b5c:	4b35      	ldr	r3, [pc, #212]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05d      	beq.n	8006c20 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b64:	e02e      	b.n	8006bc4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <xTaskResumeAll+0x11c>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f87c 	bl	8005c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff f877 	bl	8005c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	2201      	movs	r2, #1
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <xTaskResumeAll+0x120>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <xTaskResumeAll+0x120>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <xTaskResumeAll+0x124>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7ff f803 	bl	8005bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4b23      	ldr	r3, [pc, #140]	; (8006c44 <xTaskResumeAll+0x128>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006bbe:	4b22      	ldr	r3, [pc, #136]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc4:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <xTaskResumeAll+0x11c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1cc      	bne.n	8006b66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bd2:	f000 fb0b 	bl	80071ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <xTaskResumeAll+0x130>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006be2:	f000 f837 	bl	8006c54 <xTaskIncrementTick>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006bec:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f1      	bne.n	8006be2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <xTaskResumeAll+0x130>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c04:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <xTaskResumeAll+0x134>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c20:	f000 fd62 	bl	80076e8 <vPortExitCritical>

	return xAlreadyYielded;
 8006c24:	68bb      	ldr	r3, [r7, #8]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000418 	.word	0x20000418
 8006c34:	200003f0 	.word	0x200003f0
 8006c38:	200003b0 	.word	0x200003b0
 8006c3c:	200003f8 	.word	0x200003f8
 8006c40:	200002f4 	.word	0x200002f4
 8006c44:	200002f0 	.word	0x200002f0
 8006c48:	20000404 	.word	0x20000404
 8006c4c:	20000400 	.word	0x20000400
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5e:	4b4e      	ldr	r3, [pc, #312]	; (8006d98 <xTaskIncrementTick+0x144>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 8087 	bne.w	8006d76 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c68:	4b4c      	ldr	r3, [pc, #304]	; (8006d9c <xTaskIncrementTick+0x148>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c70:	4a4a      	ldr	r2, [pc, #296]	; (8006d9c <xTaskIncrementTick+0x148>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11f      	bne.n	8006cbc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c7c:	4b48      	ldr	r3, [pc, #288]	; (8006da0 <xTaskIncrementTick+0x14c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <xTaskIncrementTick+0x46>
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	e7fe      	b.n	8006c98 <xTaskIncrementTick+0x44>
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <xTaskIncrementTick+0x14c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <xTaskIncrementTick+0x150>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a3e      	ldr	r2, [pc, #248]	; (8006da0 <xTaskIncrementTick+0x14c>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	4a3e      	ldr	r2, [pc, #248]	; (8006da4 <xTaskIncrementTick+0x150>)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4b3e      	ldr	r3, [pc, #248]	; (8006da8 <xTaskIncrementTick+0x154>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	4a3c      	ldr	r2, [pc, #240]	; (8006da8 <xTaskIncrementTick+0x154>)
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	f000 fa98 	bl	80071ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cbc:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <xTaskIncrementTick+0x158>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d348      	bcc.n	8006d58 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc6:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <xTaskIncrementTick+0x14c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <xTaskIncrementTick+0x158>)
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	601a      	str	r2, [r3, #0]
					break;
 8006cd8:	e03e      	b.n	8006d58 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cda:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <xTaskIncrementTick+0x14c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d203      	bcs.n	8006cfa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cf2:	4a2e      	ldr	r2, [pc, #184]	; (8006dac <xTaskIncrementTick+0x158>)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cf8:	e02e      	b.n	8006d58 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe ffb6 	bl	8005c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d004      	beq.n	8006d16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3318      	adds	r3, #24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe ffad 	bl	8005c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <xTaskIncrementTick+0x15c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <xTaskIncrementTick+0x15c>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <xTaskIncrementTick+0x160>)
 8006d36:	441a      	add	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7fe ff39 	bl	8005bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <xTaskIncrementTick+0x164>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3b9      	bcc.n	8006cc6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d56:	e7b6      	b.n	8006cc6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <xTaskIncrementTick+0x164>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4915      	ldr	r1, [pc, #84]	; (8006db4 <xTaskIncrementTick+0x160>)
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d907      	bls.n	8006d80 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e004      	b.n	8006d80 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <xTaskIncrementTick+0x168>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a0f      	ldr	r2, [pc, #60]	; (8006dbc <xTaskIncrementTick+0x168>)
 8006d7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <xTaskIncrementTick+0x16c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d8c:	697b      	ldr	r3, [r7, #20]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000418 	.word	0x20000418
 8006d9c:	200003f4 	.word	0x200003f4
 8006da0:	200003a8 	.word	0x200003a8
 8006da4:	200003ac 	.word	0x200003ac
 8006da8:	20000408 	.word	0x20000408
 8006dac:	20000410 	.word	0x20000410
 8006db0:	200003f8 	.word	0x200003f8
 8006db4:	200002f4 	.word	0x200002f4
 8006db8:	200002f0 	.word	0x200002f0
 8006dbc:	20000400 	.word	0x20000400
 8006dc0:	20000404 	.word	0x20000404

08006dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <vTaskSwitchContext+0xa0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dd2:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <vTaskSwitchContext+0xa4>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dd8:	e03e      	b.n	8006e58 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <vTaskSwitchContext+0xa4>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <vTaskSwitchContext+0xa8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	fab3 f383 	clz	r3, r3
 8006dec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	f1c3 031f 	rsb	r3, r3, #31
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	491e      	ldr	r1, [pc, #120]	; (8006e70 <vTaskSwitchContext+0xac>)
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	e7fe      	b.n	8006e1c <vTaskSwitchContext+0x58>
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <vTaskSwitchContext+0xac>)
 8006e2a:	4413      	add	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d104      	bne.n	8006e4e <vTaskSwitchContext+0x8a>
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <vTaskSwitchContext+0xb0>)
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	20000418 	.word	0x20000418
 8006e68:	20000404 	.word	0x20000404
 8006e6c:	200003f8 	.word	0x200003f8
 8006e70:	200002f4 	.word	0x200002f4
 8006e74:	200002f0 	.word	0x200002f0

08006e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <vTaskPlaceOnEventList+0x24>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e7fe      	b.n	8006e9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <vTaskPlaceOnEventList+0x44>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe feaa 	bl	8005bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6838      	ldr	r0, [r7, #0]
 8006eae:	f000 fa5f 	bl	8007370 <prvAddCurrentTaskToDelayedList>
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200002f0 	.word	0x200002f0

08006ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <xTaskRemoveFromEventList+0x2a>
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3318      	adds	r3, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe febe 	bl	8005c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <xTaskRemoveFromEventList+0xac>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11c      	bne.n	8006f36 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe feb5 	bl	8005c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <xTaskRemoveFromEventList+0xb0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <xTaskRemoveFromEventList+0xb0>)
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <xTaskRemoveFromEventList+0xb4>)
 8006f26:	441a      	add	r2, r3
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f7fe fe41 	bl	8005bb6 <vListInsertEnd>
 8006f34:	e005      	b.n	8006f42 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3318      	adds	r3, #24
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	480e      	ldr	r0, [pc, #56]	; (8006f78 <xTaskRemoveFromEventList+0xb8>)
 8006f3e:	f7fe fe3a 	bl	8005bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <xTaskRemoveFromEventList+0xbc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d905      	bls.n	8006f5c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <xTaskRemoveFromEventList+0xc0>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e001      	b.n	8006f60 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f60:	697b      	ldr	r3, [r7, #20]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000418 	.word	0x20000418
 8006f70:	200003f8 	.word	0x200003f8
 8006f74:	200002f4 	.word	0x200002f4
 8006f78:	200003b0 	.word	0x200003b0
 8006f7c:	200002f0 	.word	0x200002f0
 8006f80:	20000404 	.word	0x20000404

08006f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <vTaskInternalSetTimeOutState+0x24>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <vTaskInternalSetTimeOutState+0x28>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	605a      	str	r2, [r3, #4]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000408 	.word	0x20000408
 8006fac:	200003f4 	.word	0x200003f4

08006fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <xTaskCheckForTimeOut+0x24>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e7fe      	b.n	8006fd2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <xTaskCheckForTimeOut+0x3e>
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e7fe      	b.n	8006fec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006fee:	f000 fb4d 	bl	800768c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <xTaskCheckForTimeOut+0xb8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d102      	bne.n	8007012 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	e023      	b.n	800705a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b15      	ldr	r3, [pc, #84]	; (800706c <xTaskCheckForTimeOut+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d007      	beq.n	800702e <xTaskCheckForTimeOut+0x7e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	429a      	cmp	r2, r3
 8007026:	d302      	bcc.n	800702e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e015      	b.n	800705a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	429a      	cmp	r2, r3
 8007036:	d20b      	bcs.n	8007050 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ff9d 	bl	8006f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e004      	b.n	800705a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800705a:	f000 fb45 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 800705e:	69fb      	ldr	r3, [r7, #28]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200003f4 	.word	0x200003f4
 800706c:	20000408 	.word	0x20000408

08007070 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <vTaskMissedYield+0x14>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
}
 800707a:	bf00      	nop
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	20000404 	.word	0x20000404

08007088 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007090:	f000 f852 	bl	8007138 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <prvIdleTask+0x28>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d9f9      	bls.n	8007090 <prvIdleTask+0x8>
			{
				taskYIELD();
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <prvIdleTask+0x2c>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070ac:	e7f0      	b.n	8007090 <prvIdleTask+0x8>
 80070ae:	bf00      	nop
 80070b0:	200002f4 	.word	0x200002f4
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	e00c      	b.n	80070de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4a12      	ldr	r2, [pc, #72]	; (8007118 <prvInitialiseTaskLists+0x60>)
 80070d0:	4413      	add	r3, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fd42 	bl	8005b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3301      	adds	r3, #1
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	d9ef      	bls.n	80070c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070e4:	480d      	ldr	r0, [pc, #52]	; (800711c <prvInitialiseTaskLists+0x64>)
 80070e6:	f7fe fd39 	bl	8005b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070ea:	480d      	ldr	r0, [pc, #52]	; (8007120 <prvInitialiseTaskLists+0x68>)
 80070ec:	f7fe fd36 	bl	8005b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070f0:	480c      	ldr	r0, [pc, #48]	; (8007124 <prvInitialiseTaskLists+0x6c>)
 80070f2:	f7fe fd33 	bl	8005b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070f6:	480c      	ldr	r0, [pc, #48]	; (8007128 <prvInitialiseTaskLists+0x70>)
 80070f8:	f7fe fd30 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070fc:	480b      	ldr	r0, [pc, #44]	; (800712c <prvInitialiseTaskLists+0x74>)
 80070fe:	f7fe fd2d 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007102:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <prvInitialiseTaskLists+0x78>)
 8007104:	4a05      	ldr	r2, [pc, #20]	; (800711c <prvInitialiseTaskLists+0x64>)
 8007106:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <prvInitialiseTaskLists+0x7c>)
 800710a:	4a05      	ldr	r2, [pc, #20]	; (8007120 <prvInitialiseTaskLists+0x68>)
 800710c:	601a      	str	r2, [r3, #0]
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200002f4 	.word	0x200002f4
 800711c:	20000380 	.word	0x20000380
 8007120:	20000394 	.word	0x20000394
 8007124:	200003b0 	.word	0x200003b0
 8007128:	200003c4 	.word	0x200003c4
 800712c:	200003dc 	.word	0x200003dc
 8007130:	200003a8 	.word	0x200003a8
 8007134:	200003ac 	.word	0x200003ac

08007138 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800713e:	e019      	b.n	8007174 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007140:	f000 faa4 	bl	800768c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvCheckTasksWaitingTermination+0x4c>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fd8d 	bl	8005c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007156:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <prvCheckTasksWaitingTermination+0x50>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3b01      	subs	r3, #1
 800715c:	4a0a      	ldr	r2, [pc, #40]	; (8007188 <prvCheckTasksWaitingTermination+0x50>)
 800715e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <prvCheckTasksWaitingTermination+0x54>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3b01      	subs	r3, #1
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <prvCheckTasksWaitingTermination+0x54>)
 8007168:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800716a:	f000 fabd 	bl	80076e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f80e 	bl	8007190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <prvCheckTasksWaitingTermination+0x54>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e1      	bne.n	8007140 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	200003c4 	.word	0x200003c4
 8007188:	200003f0 	.word	0x200003f0
 800718c:	200003d8 	.word	0x200003d8

08007190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d108      	bne.n	80071b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fc4c 	bl	8007a44 <vPortFree>
				vPortFree( pxTCB );
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc49 	bl	8007a44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071b2:	e017      	b.n	80071e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d103      	bne.n	80071c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fc40 	bl	8007a44 <vPortFree>
	}
 80071c4:	e00e      	b.n	80071e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d009      	beq.n	80071e4 <prvDeleteTCB+0x54>
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e7fe      	b.n	80071e2 <prvDeleteTCB+0x52>
	}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <prvResetNextTaskUnblockTime+0x38>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <prvResetNextTaskUnblockTime+0x3c>)
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007204:	e008      	b.n	8007218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <prvResetNextTaskUnblockTime+0x38>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4a04      	ldr	r2, [pc, #16]	; (8007228 <prvResetNextTaskUnblockTime+0x3c>)
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	200003a8 	.word	0x200003a8
 8007228:	20000410 	.word	0x20000410

0800722c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <xTaskGetSchedulerState+0x34>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800723a:	2301      	movs	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	e008      	b.n	8007252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <xTaskGetSchedulerState+0x38>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007248:	2302      	movs	r3, #2
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	e001      	b.n	8007252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007252:	687b      	ldr	r3, [r7, #4]
	}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200003fc 	.word	0x200003fc
 8007264:	20000418 	.word	0x20000418

08007268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d06c      	beq.n	8007358 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800727e:	4b39      	ldr	r3, [pc, #228]	; (8007364 <xTaskPriorityDisinherit+0xfc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	429a      	cmp	r2, r3
 8007286:	d009      	beq.n	800729c <xTaskPriorityDisinherit+0x34>
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	e7fe      	b.n	800729a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <xTaskPriorityDisinherit+0x50>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	e7fe      	b.n	80072b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072bc:	1e5a      	subs	r2, r3, #1
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d044      	beq.n	8007358 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d140      	bne.n	8007358 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fcc8 	bl	8005c70 <uxListRemove>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d115      	bne.n	8007312 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ea:	491f      	ldr	r1, [pc, #124]	; (8007368 <xTaskPriorityDisinherit+0x100>)
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskPriorityDisinherit+0xaa>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	2201      	movs	r2, #1
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43da      	mvns	r2, r3
 8007308:	4b18      	ldr	r3, [pc, #96]	; (800736c <xTaskPriorityDisinherit+0x104>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4013      	ands	r3, r2
 800730e:	4a17      	ldr	r2, [pc, #92]	; (800736c <xTaskPriorityDisinherit+0x104>)
 8007310:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	f1c3 0207 	rsb	r2, r3, #7
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	2201      	movs	r2, #1
 800732c:	409a      	lsls	r2, r3
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <xTaskPriorityDisinherit+0x104>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4313      	orrs	r3, r2
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <xTaskPriorityDisinherit+0x104>)
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4a08      	ldr	r2, [pc, #32]	; (8007368 <xTaskPriorityDisinherit+0x100>)
 8007346:	441a      	add	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f7fe fc31 	bl	8005bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007358:	697b      	ldr	r3, [r7, #20]
	}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200002f0 	.word	0x200002f0
 8007368:	200002f4 	.word	0x200002f4
 800736c:	200003f8 	.word	0x200003f8

08007370 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800737a:	4b29      	ldr	r3, [pc, #164]	; (8007420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007380:	4b28      	ldr	r3, [pc, #160]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fc72 	bl	8005c70 <uxListRemove>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	2201      	movs	r2, #1
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43da      	mvns	r2, r3
 80073a0:	4b21      	ldr	r3, [pc, #132]	; (8007428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4013      	ands	r3, r2
 80073a6:	4a20      	ldr	r2, [pc, #128]	; (8007428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d10a      	bne.n	80073c8 <prvAddCurrentTaskToDelayedList+0x58>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3304      	adds	r3, #4
 80073be:	4619      	mov	r1, r3
 80073c0:	481a      	ldr	r0, [pc, #104]	; (800742c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073c2:	f7fe fbf8 	bl	8005bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073c6:	e026      	b.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073d0:	4b14      	ldr	r3, [pc, #80]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d209      	bcs.n	80073f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e0:	4b13      	ldr	r3, [pc, #76]	; (8007430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe fc06 	bl	8005bfe <vListInsert>
}
 80073f2:	e010      	b.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7fe fbfc 	bl	8005bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d202      	bcs.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007410:	4a09      	ldr	r2, [pc, #36]	; (8007438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6013      	str	r3, [r2, #0]
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200003f4 	.word	0x200003f4
 8007424:	200002f0 	.word	0x200002f0
 8007428:	200003f8 	.word	0x200003f8
 800742c:	200003dc 	.word	0x200003dc
 8007430:	200003ac 	.word	0x200003ac
 8007434:	200003a8 	.word	0x200003a8
 8007438:	20000410 	.word	0x20000410

0800743c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3b04      	subs	r3, #4
 800744c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3b04      	subs	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3b04      	subs	r3, #4
 800746a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800746c:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <pxPortInitialiseStack+0x64>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3b14      	subs	r3, #20
 8007476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3b04      	subs	r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f06f 0202 	mvn.w	r2, #2
 800748a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b20      	subs	r3, #32
 8007490:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	080074a5 	.word	0x080074a5

080074a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <prvTaskExitError+0x50>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b6:	d009      	beq.n	80074cc <prvTaskExitError+0x28>
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e7fe      	b.n	80074ca <prvTaskExitError+0x26>
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074de:	bf00      	nop
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0fc      	beq.n	80074e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	2000000c 	.word	0x2000000c
	...

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	4770      	bx	lr
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst2>:
 8007520:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <prvPortStartFirstTask+0x24>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8814 	msr	CONTROL, r0
 800753a:	b662      	cpsie	i
 800753c:	b661      	cpsie	f
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	df00      	svc	0
 8007548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800754a:	bf00      	nop
 800754c:	e000ed08 	.word	0xe000ed08

08007550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007556:	4b44      	ldr	r3, [pc, #272]	; (8007668 <xPortStartScheduler+0x118>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a44      	ldr	r2, [pc, #272]	; (800766c <xPortStartScheduler+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <xPortStartScheduler+0x24>
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	e7fe      	b.n	8007572 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007574:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <xPortStartScheduler+0x118>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <xPortStartScheduler+0x120>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d109      	bne.n	8007592 <xPortStartScheduler+0x42>
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e7fe      	b.n	8007590 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007592:	4b38      	ldr	r3, [pc, #224]	; (8007674 <xPortStartScheduler+0x124>)
 8007594:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	22ff      	movs	r2, #255	; 0xff
 80075a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b30      	ldr	r3, [pc, #192]	; (8007678 <xPortStartScheduler+0x128>)
 80075b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ba:	4b30      	ldr	r3, [pc, #192]	; (800767c <xPortStartScheduler+0x12c>)
 80075bc:	2207      	movs	r2, #7
 80075be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075c0:	e009      	b.n	80075d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80075c2:	4b2e      	ldr	r3, [pc, #184]	; (800767c <xPortStartScheduler+0x12c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4a2c      	ldr	r2, [pc, #176]	; (800767c <xPortStartScheduler+0x12c>)
 80075ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	d0ef      	beq.n	80075c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075e2:	4b26      	ldr	r3, [pc, #152]	; (800767c <xPortStartScheduler+0x12c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1c3 0307 	rsb	r3, r3, #7
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d009      	beq.n	8007602 <xPortStartScheduler+0xb2>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	e7fe      	b.n	8007600 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007602:	4b1e      	ldr	r3, [pc, #120]	; (800767c <xPortStartScheduler+0x12c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <xPortStartScheduler+0x12c>)
 800760a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800760c:	4b1b      	ldr	r3, [pc, #108]	; (800767c <xPortStartScheduler+0x12c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <xPortStartScheduler+0x12c>)
 8007616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007620:	4b17      	ldr	r3, [pc, #92]	; (8007680 <xPortStartScheduler+0x130>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <xPortStartScheduler+0x130>)
 8007626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800762a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <xPortStartScheduler+0x130>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <xPortStartScheduler+0x130>)
 8007632:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007638:	f000 f8d6 	bl	80077e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <xPortStartScheduler+0x134>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007642:	f000 f8f5 	bl	8007830 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <xPortStartScheduler+0x138>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a0f      	ldr	r2, [pc, #60]	; (8007688 <xPortStartScheduler+0x138>)
 800764c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007650:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007652:	f7ff ff69 	bl	8007528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007656:	f7ff fbb5 	bl	8006dc4 <vTaskSwitchContext>
	prvTaskExitError();
 800765a:	f7ff ff23 	bl	80074a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed00 	.word	0xe000ed00
 800766c:	410fc271 	.word	0x410fc271
 8007670:	410fc270 	.word	0x410fc270
 8007674:	e000e400 	.word	0xe000e400
 8007678:	2000041c 	.word	0x2000041c
 800767c:	20000420 	.word	0x20000420
 8007680:	e000ed20 	.word	0xe000ed20
 8007684:	2000000c 	.word	0x2000000c
 8007688:	e000ef34 	.word	0xe000ef34

0800768c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <vPortEnterCritical+0x54>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <vPortEnterCritical+0x54>)
 80076ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <vPortEnterCritical+0x54>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10e      	bne.n	80076d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortEnterCritical+0x58>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <vPortEnterCritical+0x48>
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	e7fe      	b.n	80076d2 <vPortEnterCritical+0x46>
	}
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	2000000c 	.word	0x2000000c
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <vPortExitCritical+0x4c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <vPortExitCritical+0x22>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	e7fe      	b.n	8007708 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <vPortExitCritical+0x4c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	4a08      	ldr	r2, [pc, #32]	; (8007734 <vPortExitCritical+0x4c>)
 8007712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <vPortExitCritical+0x4c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <vPortExitCritical+0x3e>
 800771c:	2300      	movs	r3, #0
 800771e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000000c 	.word	0x2000000c
	...

08007740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007740:	f3ef 8009 	mrs	r0, PSP
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <pxCurrentTCBConst>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	f01e 0f10 	tst.w	lr, #16
 8007750:	bf08      	it	eq
 8007752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	6010      	str	r0, [r2, #0]
 800775c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007764:	f380 8811 	msr	BASEPRI, r0
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f7ff fb28 	bl	8006dc4 <vTaskSwitchContext>
 8007774:	f04f 0000 	mov.w	r0, #0
 8007778:	f380 8811 	msr	BASEPRI, r0
 800777c:	bc09      	pop	{r0, r3}
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	6808      	ldr	r0, [r1, #0]
 8007782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	f01e 0f10 	tst.w	lr, #16
 800778a:	bf08      	it	eq
 800778c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007790:	f380 8809 	msr	PSP, r0
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst>:
 80077a0:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077c0:	f7ff fa48 	bl	8006c54 <xTaskIncrementTick>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ca:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <SysTick_Handler+0x3c>)
 80077cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed04 	.word	0xe000ed04

080077e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <vPortSetupTimerInterrupt+0x34>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <vPortSetupTimerInterrupt+0x38>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <vPortSetupTimerInterrupt+0x3c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <vPortSetupTimerInterrupt+0x40>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	099b      	lsrs	r3, r3, #6
 8007804:	4a09      	ldr	r2, [pc, #36]	; (800782c <vPortSetupTimerInterrupt+0x44>)
 8007806:	3b01      	subs	r3, #1
 8007808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800780a:	4b04      	ldr	r3, [pc, #16]	; (800781c <vPortSetupTimerInterrupt+0x34>)
 800780c:	2207      	movs	r2, #7
 800780e:	601a      	str	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000e010 	.word	0xe000e010
 8007820:	e000e018 	.word	0xe000e018
 8007824:	20000000 	.word	0x20000000
 8007828:	10624dd3 	.word	0x10624dd3
 800782c:	e000e014 	.word	0xe000e014

08007830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007840 <vPortEnableVFP+0x10>
 8007834:	6801      	ldr	r1, [r0, #0]
 8007836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800783a:	6001      	str	r1, [r0, #0]
 800783c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800783e:	bf00      	nop
 8007840:	e000ed88 	.word	0xe000ed88

08007844 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800784a:	f3ef 8305 	mrs	r3, IPSR
 800784e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d913      	bls.n	800787e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007856:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <vPortValidateInterruptPriority+0x6c>)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007860:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <vPortValidateInterruptPriority+0x70>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	7afa      	ldrb	r2, [r7, #11]
 8007866:	429a      	cmp	r2, r3
 8007868:	d209      	bcs.n	800787e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	607b      	str	r3, [r7, #4]
 800787c:	e7fe      	b.n	800787c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <vPortValidateInterruptPriority+0x74>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007886:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <vPortValidateInterruptPriority+0x78>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d909      	bls.n	80078a2 <vPortValidateInterruptPriority+0x5e>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	e7fe      	b.n	80078a0 <vPortValidateInterruptPriority+0x5c>
	}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000e3f0 	.word	0xe000e3f0
 80078b4:	2000041c 	.word	0x2000041c
 80078b8:	e000ed0c 	.word	0xe000ed0c
 80078bc:	20000420 	.word	0x20000420

080078c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078cc:	f7ff f918 	bl	8006b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078d0:	4b57      	ldr	r3, [pc, #348]	; (8007a30 <pvPortMalloc+0x170>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d8:	f000 f90c 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078dc:	4b55      	ldr	r3, [pc, #340]	; (8007a34 <pvPortMalloc+0x174>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 808c 	bne.w	8007a02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01c      	beq.n	800792a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80078f0:	2208      	movs	r2, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	3308      	adds	r3, #8
 800790a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <pvPortMalloc+0x6a>
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e7fe      	b.n	8007928 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d068      	beq.n	8007a02 <pvPortMalloc+0x142>
 8007930:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <pvPortMalloc+0x178>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d863      	bhi.n	8007a02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800793a:	4b40      	ldr	r3, [pc, #256]	; (8007a3c <pvPortMalloc+0x17c>)
 800793c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800793e:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <pvPortMalloc+0x17c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007944:	e004      	b.n	8007950 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <pvPortMalloc+0xa2>
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f1      	bne.n	8007946 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <pvPortMalloc+0x170>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	d04a      	beq.n	8007a02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2208      	movs	r2, #8
 8007972:	4413      	add	r3, r2
 8007974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	2308      	movs	r3, #8
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	429a      	cmp	r2, r3
 800798c:	d91e      	bls.n	80079cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <pvPortMalloc+0xf4>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	e7fe      	b.n	80079b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c6:	69b8      	ldr	r0, [r7, #24]
 80079c8:	f000 f8f6 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <pvPortMalloc+0x178>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <pvPortMalloc+0x178>)
 80079d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <pvPortMalloc+0x178>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <pvPortMalloc+0x180>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d203      	bcs.n	80079ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <pvPortMalloc+0x178>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <pvPortMalloc+0x180>)
 80079ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <pvPortMalloc+0x174>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a02:	f7ff f88b 	bl	8006b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <pvPortMalloc+0x164>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0x162>
	return pvReturn;
 8007a24:	69fb      	ldr	r3, [r7, #28]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000402c 	.word	0x2000402c
 8007a34:	20004038 	.word	0x20004038
 8007a38:	20004030 	.word	0x20004030
 8007a3c:	20004024 	.word	0x20004024
 8007a40:	20004034 	.word	0x20004034

08007a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d046      	beq.n	8007ae4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a56:	2308      	movs	r3, #8
 8007a58:	425b      	negs	r3, r3
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	4b20      	ldr	r3, [pc, #128]	; (8007aec <vPortFree+0xa8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <vPortFree+0x42>
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e7fe      	b.n	8007a84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <vPortFree+0x5e>
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60bb      	str	r3, [r7, #8]
 8007aa0:	e7fe      	b.n	8007aa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b11      	ldr	r3, [pc, #68]	; (8007aec <vPortFree+0xa8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d019      	beq.n	8007ae4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d115      	bne.n	8007ae4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <vPortFree+0xa8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac8:	f7ff f81a 	bl	8006b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vPortFree+0xac>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vPortFree+0xac>)
 8007ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f000 f86c 	bl	8007bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ae0:	f7ff f81c 	bl	8006b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20004038 	.word	0x20004038
 8007af0:	20004030 	.word	0x20004030

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000424 	.word	0x20000424
 8007ba4:	20004024 	.word	0x20004024
 8007ba8:	2000402c 	.word	0x2000402c
 8007bac:	20004034 	.word	0x20004034
 8007bb0:	20004030 	.word	0x20004030
 8007bb4:	20004038 	.word	0x20004038

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20004024 	.word	0x20004024
 8007c68:	2000402c 	.word	0x2000402c

08007c6c <__errno>:
 8007c6c:	4b01      	ldr	r3, [pc, #4]	; (8007c74 <__errno+0x8>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000010 	.word	0x20000010

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4e0d      	ldr	r6, [pc, #52]	; (8007cb0 <__libc_init_array+0x38>)
 8007c7c:	4c0d      	ldr	r4, [pc, #52]	; (8007cb4 <__libc_init_array+0x3c>)
 8007c7e:	1ba4      	subs	r4, r4, r6
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	2500      	movs	r5, #0
 8007c84:	42a5      	cmp	r5, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	4e0b      	ldr	r6, [pc, #44]	; (8007cb8 <__libc_init_array+0x40>)
 8007c8a:	4c0c      	ldr	r4, [pc, #48]	; (8007cbc <__libc_init_array+0x44>)
 8007c8c:	f001 f882 	bl	8008d94 <_init>
 8007c90:	1ba4      	subs	r4, r4, r6
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	2500      	movs	r5, #0
 8007c96:	42a5      	cmp	r5, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ca0:	4798      	blx	r3
 8007ca2:	3501      	adds	r5, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007caa:	4798      	blx	r3
 8007cac:	3501      	adds	r5, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	08008ee0 	.word	0x08008ee0
 8007cb4:	08008ee0 	.word	0x08008ee0
 8007cb8:	08008ee0 	.word	0x08008ee0
 8007cbc:	08008ee4 	.word	0x08008ee4

08007cc0 <memcpy>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	1e43      	subs	r3, r0, #1
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d100      	bne.n	8007ccc <memcpy+0xc>
 8007cca:	bd10      	pop	{r4, pc}
 8007ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd4:	e7f7      	b.n	8007cc6 <memcpy+0x6>

08007cd6 <memset>:
 8007cd6:	4402      	add	r2, r0
 8007cd8:	4603      	mov	r3, r0
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d100      	bne.n	8007ce0 <memset+0xa>
 8007cde:	4770      	bx	lr
 8007ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce4:	e7f9      	b.n	8007cda <memset+0x4>
	...

08007ce8 <pow>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b04 	vpush	{d8-d9}
 8007cf0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007fc4 <pow+0x2dc>
 8007cf4:	b08d      	sub	sp, #52	; 0x34
 8007cf6:	ec57 6b10 	vmov	r6, r7, d0
 8007cfa:	ec55 4b11 	vmov	r4, r5, d1
 8007cfe:	f000 f963 	bl	8007fc8 <__ieee754_pow>
 8007d02:	f999 3000 	ldrsb.w	r3, [r9]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	eeb0 8a40 	vmov.f32	s16, s0
 8007d0e:	eef0 8a60 	vmov.f32	s17, s1
 8007d12:	46c8      	mov	r8, r9
 8007d14:	d05f      	beq.n	8007dd6 <pow+0xee>
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f7f8 fead 	bl	8000a7c <__aeabi_dcmpun>
 8007d22:	4683      	mov	fp, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d156      	bne.n	8007dd6 <pow+0xee>
 8007d28:	4632      	mov	r2, r6
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 fea4 	bl	8000a7c <__aeabi_dcmpun>
 8007d34:	9001      	str	r0, [sp, #4]
 8007d36:	b1e8      	cbz	r0, 8007d74 <pow+0x8c>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fe6a 	bl	8000a18 <__aeabi_dcmpeq>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d046      	beq.n	8007dd6 <pow+0xee>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	4b96      	ldr	r3, [pc, #600]	; (8007fa8 <pow+0x2c0>)
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	4b96      	ldr	r3, [pc, #600]	; (8007fac <pow+0x2c4>)
 8007d52:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d56:	2200      	movs	r2, #0
 8007d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d64:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d68:	d033      	beq.n	8007dd2 <pow+0xea>
 8007d6a:	a802      	add	r0, sp, #8
 8007d6c:	f000 fefb 	bl	8008b66 <matherr>
 8007d70:	bb48      	cbnz	r0, 8007dc6 <pow+0xde>
 8007d72:	e05d      	b.n	8007e30 <pow+0x148>
 8007d74:	f04f 0a00 	mov.w	sl, #0
 8007d78:	f04f 0b00 	mov.w	fp, #0
 8007d7c:	4652      	mov	r2, sl
 8007d7e:	465b      	mov	r3, fp
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 fe48 	bl	8000a18 <__aeabi_dcmpeq>
 8007d88:	ec4b ab19 	vmov	d9, sl, fp
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d054      	beq.n	8007e3a <pow+0x152>
 8007d90:	4652      	mov	r2, sl
 8007d92:	465b      	mov	r3, fp
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fe3e 	bl	8000a18 <__aeabi_dcmpeq>
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	b318      	cbz	r0, 8007de8 <pow+0x100>
 8007da0:	2301      	movs	r3, #1
 8007da2:	9302      	str	r3, [sp, #8]
 8007da4:	4b80      	ldr	r3, [pc, #512]	; (8007fa8 <pow+0x2c0>)
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dac:	9b00      	ldr	r3, [sp, #0]
 8007dae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007db2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007db6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0d5      	beq.n	8007d6a <pow+0x82>
 8007dbe:	4b7b      	ldr	r3, [pc, #492]	; (8007fac <pow+0x2c4>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc8:	b11b      	cbz	r3, 8007dd2 <pow+0xea>
 8007dca:	f7ff ff4f 	bl	8007c6c <__errno>
 8007dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dda:	eef0 0a68 	vmov.f32	s1, s17
 8007dde:	b00d      	add	sp, #52	; 0x34
 8007de0:	ecbd 8b04 	vpop	{d8-d9}
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	ec45 4b10 	vmov	d0, r4, r5
 8007dec:	f000 feb3 	bl	8008b56 <finite>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0f0      	beq.n	8007dd6 <pow+0xee>
 8007df4:	4652      	mov	r2, sl
 8007df6:	465b      	mov	r3, fp
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f7f8 fe16 	bl	8000a2c <__aeabi_dcmplt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d0e8      	beq.n	8007dd6 <pow+0xee>
 8007e04:	2301      	movs	r3, #1
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	4b67      	ldr	r3, [pc, #412]	; (8007fa8 <pow+0x2c0>)
 8007e0a:	9303      	str	r3, [sp, #12]
 8007e0c:	f999 3000 	ldrsb.w	r3, [r9]
 8007e10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007e14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e1c:	b913      	cbnz	r3, 8007e24 <pow+0x13c>
 8007e1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e22:	e7a2      	b.n	8007d6a <pow+0x82>
 8007e24:	4962      	ldr	r1, [pc, #392]	; (8007fb0 <pow+0x2c8>)
 8007e26:	2000      	movs	r0, #0
 8007e28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d19c      	bne.n	8007d6a <pow+0x82>
 8007e30:	f7ff ff1c 	bl	8007c6c <__errno>
 8007e34:	2321      	movs	r3, #33	; 0x21
 8007e36:	6003      	str	r3, [r0, #0]
 8007e38:	e7c5      	b.n	8007dc6 <pow+0xde>
 8007e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e3e:	eef0 0a68 	vmov.f32	s1, s17
 8007e42:	f000 fe88 	bl	8008b56 <finite>
 8007e46:	9000      	str	r0, [sp, #0]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f040 8081 	bne.w	8007f50 <pow+0x268>
 8007e4e:	ec47 6b10 	vmov	d0, r6, r7
 8007e52:	f000 fe80 	bl	8008b56 <finite>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d07a      	beq.n	8007f50 <pow+0x268>
 8007e5a:	ec45 4b10 	vmov	d0, r4, r5
 8007e5e:	f000 fe7a 	bl	8008b56 <finite>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d074      	beq.n	8007f50 <pow+0x268>
 8007e66:	ec53 2b18 	vmov	r2, r3, d8
 8007e6a:	ee18 0a10 	vmov	r0, s16
 8007e6e:	4619      	mov	r1, r3
 8007e70:	f7f8 fe04 	bl	8000a7c <__aeabi_dcmpun>
 8007e74:	f999 9000 	ldrsb.w	r9, [r9]
 8007e78:	4b4b      	ldr	r3, [pc, #300]	; (8007fa8 <pow+0x2c0>)
 8007e7a:	b1b0      	cbz	r0, 8007eaa <pow+0x1c2>
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e82:	9b00      	ldr	r3, [sp, #0]
 8007e84:	930a      	str	r3, [sp, #40]	; 0x28
 8007e86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e8e:	f1b9 0f00 	cmp.w	r9, #0
 8007e92:	d0c4      	beq.n	8007e1e <pow+0x136>
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	4650      	mov	r0, sl
 8007e9a:	4659      	mov	r1, fp
 8007e9c:	f7f8 fc7e 	bl	800079c <__aeabi_ddiv>
 8007ea0:	f1b9 0f02 	cmp.w	r9, #2
 8007ea4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ea8:	e7c1      	b.n	8007e2e <pow+0x146>
 8007eaa:	2203      	movs	r2, #3
 8007eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007eb0:	900a      	str	r0, [sp, #40]	; 0x28
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <pow+0x2cc>)
 8007eba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ec2:	f7f8 fb41 	bl	8000548 <__aeabi_dmul>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	f1b9 0f00 	cmp.w	r9, #0
 8007ece:	d124      	bne.n	8007f1a <pow+0x232>
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <pow+0x2d0>)
 8007ed2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007ed6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eda:	4630      	mov	r0, r6
 8007edc:	4652      	mov	r2, sl
 8007ede:	465b      	mov	r3, fp
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fda3 	bl	8000a2c <__aeabi_dcmplt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d056      	beq.n	8007f98 <pow+0x2b0>
 8007eea:	ec45 4b10 	vmov	d0, r4, r5
 8007eee:	f000 fe47 	bl	8008b80 <rint>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	ec51 0b10 	vmov	r0, r1, d0
 8007efa:	f7f8 fd8d 	bl	8000a18 <__aeabi_dcmpeq>
 8007efe:	b920      	cbnz	r0, 8007f0a <pow+0x222>
 8007f00:	4b2e      	ldr	r3, [pc, #184]	; (8007fbc <pow+0x2d4>)
 8007f02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f0a:	f998 3000 	ldrsb.w	r3, [r8]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d142      	bne.n	8007f98 <pow+0x2b0>
 8007f12:	f7ff feab 	bl	8007c6c <__errno>
 8007f16:	2322      	movs	r3, #34	; 0x22
 8007f18:	e78d      	b.n	8007e36 <pow+0x14e>
 8007f1a:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <pow+0x2d8>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f22:	4630      	mov	r0, r6
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fd7f 	bl	8000a2c <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0eb      	beq.n	8007f0a <pow+0x222>
 8007f32:	ec45 4b10 	vmov	d0, r4, r5
 8007f36:	f000 fe23 	bl	8008b80 <rint>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	ec51 0b10 	vmov	r0, r1, d0
 8007f42:	f7f8 fd69 	bl	8000a18 <__aeabi_dcmpeq>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d1df      	bne.n	8007f0a <pow+0x222>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <pow+0x2c8>)
 8007f4e:	e7da      	b.n	8007f06 <pow+0x21e>
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	ec51 0b18 	vmov	r0, r1, d8
 8007f58:	f7f8 fd5e 	bl	8000a18 <__aeabi_dcmpeq>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f43f af3a 	beq.w	8007dd6 <pow+0xee>
 8007f62:	ec47 6b10 	vmov	d0, r6, r7
 8007f66:	f000 fdf6 	bl	8008b56 <finite>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f43f af33 	beq.w	8007dd6 <pow+0xee>
 8007f70:	ec45 4b10 	vmov	d0, r4, r5
 8007f74:	f000 fdef 	bl	8008b56 <finite>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f43f af2c 	beq.w	8007dd6 <pow+0xee>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	9302      	str	r3, [sp, #8]
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <pow+0x2c0>)
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	2300      	movs	r3, #0
 8007f88:	930a      	str	r3, [sp, #40]	; 0x28
 8007f8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f92:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007f96:	e7b8      	b.n	8007f0a <pow+0x222>
 8007f98:	a802      	add	r0, sp, #8
 8007f9a:	f000 fde4 	bl	8008b66 <matherr>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f47f af11 	bne.w	8007dc6 <pow+0xde>
 8007fa4:	e7b5      	b.n	8007f12 <pow+0x22a>
 8007fa6:	bf00      	nop
 8007fa8:	08008e90 	.word	0x08008e90
 8007fac:	3ff00000 	.word	0x3ff00000
 8007fb0:	fff00000 	.word	0xfff00000
 8007fb4:	3fe00000 	.word	0x3fe00000
 8007fb8:	47efffff 	.word	0x47efffff
 8007fbc:	c7efffff 	.word	0xc7efffff
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	20000074 	.word	0x20000074

08007fc8 <__ieee754_pow>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	b091      	sub	sp, #68	; 0x44
 8007fce:	ed8d 1b00 	vstr	d1, [sp]
 8007fd2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007fd6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007fda:	ea58 0302 	orrs.w	r3, r8, r2
 8007fde:	ec57 6b10 	vmov	r6, r7, d0
 8007fe2:	f000 84be 	beq.w	8008962 <__ieee754_pow+0x99a>
 8007fe6:	4b7a      	ldr	r3, [pc, #488]	; (80081d0 <__ieee754_pow+0x208>)
 8007fe8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007fec:	429c      	cmp	r4, r3
 8007fee:	463d      	mov	r5, r7
 8007ff0:	ee10 aa10 	vmov	sl, s0
 8007ff4:	dc09      	bgt.n	800800a <__ieee754_pow+0x42>
 8007ff6:	d103      	bne.n	8008000 <__ieee754_pow+0x38>
 8007ff8:	b93e      	cbnz	r6, 800800a <__ieee754_pow+0x42>
 8007ffa:	45a0      	cmp	r8, r4
 8007ffc:	dc0d      	bgt.n	800801a <__ieee754_pow+0x52>
 8007ffe:	e001      	b.n	8008004 <__ieee754_pow+0x3c>
 8008000:	4598      	cmp	r8, r3
 8008002:	dc02      	bgt.n	800800a <__ieee754_pow+0x42>
 8008004:	4598      	cmp	r8, r3
 8008006:	d10e      	bne.n	8008026 <__ieee754_pow+0x5e>
 8008008:	b16a      	cbz	r2, 8008026 <__ieee754_pow+0x5e>
 800800a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800800e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008012:	ea54 030a 	orrs.w	r3, r4, sl
 8008016:	f000 84a4 	beq.w	8008962 <__ieee754_pow+0x99a>
 800801a:	486e      	ldr	r0, [pc, #440]	; (80081d4 <__ieee754_pow+0x20c>)
 800801c:	b011      	add	sp, #68	; 0x44
 800801e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008022:	f000 bda5 	b.w	8008b70 <nan>
 8008026:	2d00      	cmp	r5, #0
 8008028:	da53      	bge.n	80080d2 <__ieee754_pow+0x10a>
 800802a:	4b6b      	ldr	r3, [pc, #428]	; (80081d8 <__ieee754_pow+0x210>)
 800802c:	4598      	cmp	r8, r3
 800802e:	dc4d      	bgt.n	80080cc <__ieee754_pow+0x104>
 8008030:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008034:	4598      	cmp	r8, r3
 8008036:	dd4c      	ble.n	80080d2 <__ieee754_pow+0x10a>
 8008038:	ea4f 5328 	mov.w	r3, r8, asr #20
 800803c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008040:	2b14      	cmp	r3, #20
 8008042:	dd26      	ble.n	8008092 <__ieee754_pow+0xca>
 8008044:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008048:	fa22 f103 	lsr.w	r1, r2, r3
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	4293      	cmp	r3, r2
 8008052:	d13e      	bne.n	80080d2 <__ieee754_pow+0x10a>
 8008054:	f001 0101 	and.w	r1, r1, #1
 8008058:	f1c1 0b02 	rsb	fp, r1, #2
 800805c:	2a00      	cmp	r2, #0
 800805e:	d15b      	bne.n	8008118 <__ieee754_pow+0x150>
 8008060:	4b5b      	ldr	r3, [pc, #364]	; (80081d0 <__ieee754_pow+0x208>)
 8008062:	4598      	cmp	r8, r3
 8008064:	d124      	bne.n	80080b0 <__ieee754_pow+0xe8>
 8008066:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800806a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800806e:	ea53 030a 	orrs.w	r3, r3, sl
 8008072:	f000 8476 	beq.w	8008962 <__ieee754_pow+0x99a>
 8008076:	4b59      	ldr	r3, [pc, #356]	; (80081dc <__ieee754_pow+0x214>)
 8008078:	429c      	cmp	r4, r3
 800807a:	dd2d      	ble.n	80080d8 <__ieee754_pow+0x110>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	f280 8473 	bge.w	800896a <__ieee754_pow+0x9a2>
 8008084:	2000      	movs	r0, #0
 8008086:	2100      	movs	r1, #0
 8008088:	ec41 0b10 	vmov	d0, r0, r1
 800808c:	b011      	add	sp, #68	; 0x44
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	2a00      	cmp	r2, #0
 8008094:	d13e      	bne.n	8008114 <__ieee754_pow+0x14c>
 8008096:	f1c3 0314 	rsb	r3, r3, #20
 800809a:	fa48 f103 	asr.w	r1, r8, r3
 800809e:	fa01 f303 	lsl.w	r3, r1, r3
 80080a2:	4543      	cmp	r3, r8
 80080a4:	f040 8469 	bne.w	800897a <__ieee754_pow+0x9b2>
 80080a8:	f001 0101 	and.w	r1, r1, #1
 80080ac:	f1c1 0b02 	rsb	fp, r1, #2
 80080b0:	4b4b      	ldr	r3, [pc, #300]	; (80081e0 <__ieee754_pow+0x218>)
 80080b2:	4598      	cmp	r8, r3
 80080b4:	d118      	bne.n	80080e8 <__ieee754_pow+0x120>
 80080b6:	f1b9 0f00 	cmp.w	r9, #0
 80080ba:	f280 845a 	bge.w	8008972 <__ieee754_pow+0x9aa>
 80080be:	4948      	ldr	r1, [pc, #288]	; (80081e0 <__ieee754_pow+0x218>)
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	2000      	movs	r0, #0
 80080c6:	f7f8 fb69 	bl	800079c <__aeabi_ddiv>
 80080ca:	e7dd      	b.n	8008088 <__ieee754_pow+0xc0>
 80080cc:	f04f 0b02 	mov.w	fp, #2
 80080d0:	e7c4      	b.n	800805c <__ieee754_pow+0x94>
 80080d2:	f04f 0b00 	mov.w	fp, #0
 80080d6:	e7c1      	b.n	800805c <__ieee754_pow+0x94>
 80080d8:	f1b9 0f00 	cmp.w	r9, #0
 80080dc:	dad2      	bge.n	8008084 <__ieee754_pow+0xbc>
 80080de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80080e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80080e6:	e7cf      	b.n	8008088 <__ieee754_pow+0xc0>
 80080e8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80080ec:	d106      	bne.n	80080fc <__ieee754_pow+0x134>
 80080ee:	4632      	mov	r2, r6
 80080f0:	463b      	mov	r3, r7
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7f8 fa27 	bl	8000548 <__aeabi_dmul>
 80080fa:	e7c5      	b.n	8008088 <__ieee754_pow+0xc0>
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <__ieee754_pow+0x21c>)
 80080fe:	4599      	cmp	r9, r3
 8008100:	d10a      	bne.n	8008118 <__ieee754_pow+0x150>
 8008102:	2d00      	cmp	r5, #0
 8008104:	db08      	blt.n	8008118 <__ieee754_pow+0x150>
 8008106:	ec47 6b10 	vmov	d0, r6, r7
 800810a:	b011      	add	sp, #68	; 0x44
 800810c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	f000 bc68 	b.w	80089e4 <__ieee754_sqrt>
 8008114:	f04f 0b00 	mov.w	fp, #0
 8008118:	ec47 6b10 	vmov	d0, r6, r7
 800811c:	f000 fd12 	bl	8008b44 <fabs>
 8008120:	ec51 0b10 	vmov	r0, r1, d0
 8008124:	f1ba 0f00 	cmp.w	sl, #0
 8008128:	d127      	bne.n	800817a <__ieee754_pow+0x1b2>
 800812a:	b124      	cbz	r4, 8008136 <__ieee754_pow+0x16e>
 800812c:	4b2c      	ldr	r3, [pc, #176]	; (80081e0 <__ieee754_pow+0x218>)
 800812e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008132:	429a      	cmp	r2, r3
 8008134:	d121      	bne.n	800817a <__ieee754_pow+0x1b2>
 8008136:	f1b9 0f00 	cmp.w	r9, #0
 800813a:	da05      	bge.n	8008148 <__ieee754_pow+0x180>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	2000      	movs	r0, #0
 8008142:	4927      	ldr	r1, [pc, #156]	; (80081e0 <__ieee754_pow+0x218>)
 8008144:	f7f8 fb2a 	bl	800079c <__aeabi_ddiv>
 8008148:	2d00      	cmp	r5, #0
 800814a:	da9d      	bge.n	8008088 <__ieee754_pow+0xc0>
 800814c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008150:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008154:	ea54 030b 	orrs.w	r3, r4, fp
 8008158:	d108      	bne.n	800816c <__ieee754_pow+0x1a4>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4610      	mov	r0, r2
 8008160:	4619      	mov	r1, r3
 8008162:	f7f8 f839 	bl	80001d8 <__aeabi_dsub>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	e7ac      	b.n	80080c6 <__ieee754_pow+0xfe>
 800816c:	f1bb 0f01 	cmp.w	fp, #1
 8008170:	d18a      	bne.n	8008088 <__ieee754_pow+0xc0>
 8008172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008176:	4619      	mov	r1, r3
 8008178:	e786      	b.n	8008088 <__ieee754_pow+0xc0>
 800817a:	0fed      	lsrs	r5, r5, #31
 800817c:	1e6b      	subs	r3, r5, #1
 800817e:	930d      	str	r3, [sp, #52]	; 0x34
 8008180:	ea5b 0303 	orrs.w	r3, fp, r3
 8008184:	d102      	bne.n	800818c <__ieee754_pow+0x1c4>
 8008186:	4632      	mov	r2, r6
 8008188:	463b      	mov	r3, r7
 800818a:	e7e8      	b.n	800815e <__ieee754_pow+0x196>
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <__ieee754_pow+0x220>)
 800818e:	4598      	cmp	r8, r3
 8008190:	f340 80fe 	ble.w	8008390 <__ieee754_pow+0x3c8>
 8008194:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008198:	4598      	cmp	r8, r3
 800819a:	dd0a      	ble.n	80081b2 <__ieee754_pow+0x1ea>
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <__ieee754_pow+0x214>)
 800819e:	429c      	cmp	r4, r3
 80081a0:	dc0d      	bgt.n	80081be <__ieee754_pow+0x1f6>
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	f6bf af6d 	bge.w	8008084 <__ieee754_pow+0xbc>
 80081aa:	a307      	add	r3, pc, #28	; (adr r3, 80081c8 <__ieee754_pow+0x200>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	e79f      	b.n	80080f2 <__ieee754_pow+0x12a>
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <__ieee754_pow+0x224>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	ddf4      	ble.n	80081a2 <__ieee754_pow+0x1da>
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <__ieee754_pow+0x218>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	dd18      	ble.n	80081f0 <__ieee754_pow+0x228>
 80081be:	f1b9 0f00 	cmp.w	r9, #0
 80081c2:	dcf2      	bgt.n	80081aa <__ieee754_pow+0x1e2>
 80081c4:	e75e      	b.n	8008084 <__ieee754_pow+0xbc>
 80081c6:	bf00      	nop
 80081c8:	8800759c 	.word	0x8800759c
 80081cc:	7e37e43c 	.word	0x7e37e43c
 80081d0:	7ff00000 	.word	0x7ff00000
 80081d4:	08008e93 	.word	0x08008e93
 80081d8:	433fffff 	.word	0x433fffff
 80081dc:	3fefffff 	.word	0x3fefffff
 80081e0:	3ff00000 	.word	0x3ff00000
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	41e00000 	.word	0x41e00000
 80081ec:	3feffffe 	.word	0x3feffffe
 80081f0:	2200      	movs	r2, #0
 80081f2:	4b63      	ldr	r3, [pc, #396]	; (8008380 <__ieee754_pow+0x3b8>)
 80081f4:	f7f7 fff0 	bl	80001d8 <__aeabi_dsub>
 80081f8:	a355      	add	r3, pc, #340	; (adr r3, 8008350 <__ieee754_pow+0x388>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	f7f8 f9a1 	bl	8000548 <__aeabi_dmul>
 8008206:	a354      	add	r3, pc, #336	; (adr r3, 8008358 <__ieee754_pow+0x390>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	4606      	mov	r6, r0
 800820e:	460f      	mov	r7, r1
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	f7f8 f998 	bl	8000548 <__aeabi_dmul>
 8008218:	2200      	movs	r2, #0
 800821a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821e:	4b59      	ldr	r3, [pc, #356]	; (8008384 <__ieee754_pow+0x3bc>)
 8008220:	4620      	mov	r0, r4
 8008222:	4629      	mov	r1, r5
 8008224:	f7f8 f990 	bl	8000548 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	a14c      	add	r1, pc, #304	; (adr r1, 8008360 <__ieee754_pow+0x398>)
 800822e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008232:	f7f7 ffd1 	bl	80001d8 <__aeabi_dsub>
 8008236:	4622      	mov	r2, r4
 8008238:	462b      	mov	r3, r5
 800823a:	f7f8 f985 	bl	8000548 <__aeabi_dmul>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	2000      	movs	r0, #0
 8008244:	4950      	ldr	r1, [pc, #320]	; (8008388 <__ieee754_pow+0x3c0>)
 8008246:	f7f7 ffc7 	bl	80001d8 <__aeabi_dsub>
 800824a:	4622      	mov	r2, r4
 800824c:	462b      	mov	r3, r5
 800824e:	4680      	mov	r8, r0
 8008250:	4689      	mov	r9, r1
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 f977 	bl	8000548 <__aeabi_dmul>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	f7f8 f971 	bl	8000548 <__aeabi_dmul>
 8008266:	a340      	add	r3, pc, #256	; (adr r3, 8008368 <__ieee754_pow+0x3a0>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 f96c 	bl	8000548 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008278:	f7f7 ffae 	bl	80001d8 <__aeabi_dsub>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f7 ffa8 	bl	80001dc <__adddf3>
 800828c:	2000      	movs	r0, #0
 800828e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	f7f7 ff9f 	bl	80001d8 <__aeabi_dsub>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f7 ff99 	bl	80001d8 <__aeabi_dsub>
 80082a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082a8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80082ac:	4313      	orrs	r3, r2
 80082ae:	4606      	mov	r6, r0
 80082b0:	460f      	mov	r7, r1
 80082b2:	f040 81eb 	bne.w	800868c <__ieee754_pow+0x6c4>
 80082b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008370 <__ieee754_pow+0x3a8>
 80082ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80082be:	2400      	movs	r4, #0
 80082c0:	4622      	mov	r2, r4
 80082c2:	462b      	mov	r3, r5
 80082c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082cc:	f7f7 ff84 	bl	80001d8 <__aeabi_dsub>
 80082d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d4:	f7f8 f938 	bl	8000548 <__aeabi_dmul>
 80082d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082dc:	4680      	mov	r8, r0
 80082de:	4689      	mov	r9, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f8 f930 	bl	8000548 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4640      	mov	r0, r8
 80082ee:	4649      	mov	r1, r9
 80082f0:	f7f7 ff74 	bl	80001dc <__adddf3>
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	4680      	mov	r8, r0
 80082fa:	4689      	mov	r9, r1
 80082fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008300:	f7f8 f922 	bl	8000548 <__aeabi_dmul>
 8008304:	460b      	mov	r3, r1
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	4602      	mov	r2, r0
 800830c:	4649      	mov	r1, r9
 800830e:	4640      	mov	r0, r8
 8008310:	e9cd 4500 	strd	r4, r5, [sp]
 8008314:	f7f7 ff62 	bl	80001dc <__adddf3>
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <__ieee754_pow+0x3c4>)
 800831a:	4299      	cmp	r1, r3
 800831c:	4606      	mov	r6, r0
 800831e:	460f      	mov	r7, r1
 8008320:	468b      	mov	fp, r1
 8008322:	f340 82f7 	ble.w	8008914 <__ieee754_pow+0x94c>
 8008326:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800832a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800832e:	4303      	orrs	r3, r0
 8008330:	f000 81ea 	beq.w	8008708 <__ieee754_pow+0x740>
 8008334:	a310      	add	r3, pc, #64	; (adr r3, 8008378 <__ieee754_pow+0x3b0>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833e:	f7f8 f903 	bl	8000548 <__aeabi_dmul>
 8008342:	a30d      	add	r3, pc, #52	; (adr r3, 8008378 <__ieee754_pow+0x3b0>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	e6d5      	b.n	80080f6 <__ieee754_pow+0x12e>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	60000000 	.word	0x60000000
 8008354:	3ff71547 	.word	0x3ff71547
 8008358:	f85ddf44 	.word	0xf85ddf44
 800835c:	3e54ae0b 	.word	0x3e54ae0b
 8008360:	55555555 	.word	0x55555555
 8008364:	3fd55555 	.word	0x3fd55555
 8008368:	652b82fe 	.word	0x652b82fe
 800836c:	3ff71547 	.word	0x3ff71547
 8008370:	00000000 	.word	0x00000000
 8008374:	bff00000 	.word	0xbff00000
 8008378:	8800759c 	.word	0x8800759c
 800837c:	7e37e43c 	.word	0x7e37e43c
 8008380:	3ff00000 	.word	0x3ff00000
 8008384:	3fd00000 	.word	0x3fd00000
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	408fffff 	.word	0x408fffff
 8008390:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	da05      	bge.n	80083a6 <__ieee754_pow+0x3de>
 800839a:	4bd3      	ldr	r3, [pc, #844]	; (80086e8 <__ieee754_pow+0x720>)
 800839c:	f7f8 f8d4 	bl	8000548 <__aeabi_dmul>
 80083a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80083a4:	460c      	mov	r4, r1
 80083a6:	1523      	asrs	r3, r4, #20
 80083a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80083ac:	4413      	add	r3, r2
 80083ae:	9309      	str	r3, [sp, #36]	; 0x24
 80083b0:	4bce      	ldr	r3, [pc, #824]	; (80086ec <__ieee754_pow+0x724>)
 80083b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80083b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80083ba:	429c      	cmp	r4, r3
 80083bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80083c0:	dd08      	ble.n	80083d4 <__ieee754_pow+0x40c>
 80083c2:	4bcb      	ldr	r3, [pc, #812]	; (80086f0 <__ieee754_pow+0x728>)
 80083c4:	429c      	cmp	r4, r3
 80083c6:	f340 815e 	ble.w	8008686 <__ieee754_pow+0x6be>
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	3301      	adds	r3, #1
 80083ce:	9309      	str	r3, [sp, #36]	; 0x24
 80083d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80083d4:	f04f 0a00 	mov.w	sl, #0
 80083d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80083dc:	930c      	str	r3, [sp, #48]	; 0x30
 80083de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083e0:	4bc4      	ldr	r3, [pc, #784]	; (80086f4 <__ieee754_pow+0x72c>)
 80083e2:	4413      	add	r3, r2
 80083e4:	ed93 7b00 	vldr	d7, [r3]
 80083e8:	4629      	mov	r1, r5
 80083ea:	ec53 2b17 	vmov	r2, r3, d7
 80083ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80083f6:	f7f7 feef 	bl	80001d8 <__aeabi_dsub>
 80083fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008406:	f7f7 fee9 	bl	80001dc <__adddf3>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	2000      	movs	r0, #0
 8008410:	49b9      	ldr	r1, [pc, #740]	; (80086f8 <__ieee754_pow+0x730>)
 8008412:	f7f8 f9c3 	bl	800079c <__aeabi_ddiv>
 8008416:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7f8 f891 	bl	8000548 <__aeabi_dmul>
 8008426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800842a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800842e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008432:	2300      	movs	r3, #0
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800843a:	106d      	asrs	r5, r5, #1
 800843c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008440:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008444:	2200      	movs	r2, #0
 8008446:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	4614      	mov	r4, r2
 8008450:	461d      	mov	r5, r3
 8008452:	f7f8 f879 	bl	8000548 <__aeabi_dmul>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f7 febb 	bl	80001d8 <__aeabi_dsub>
 8008462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	4620      	mov	r0, r4
 800846c:	4629      	mov	r1, r5
 800846e:	f7f7 feb3 	bl	80001d8 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800847a:	f7f7 fead 	bl	80001d8 <__aeabi_dsub>
 800847e:	4642      	mov	r2, r8
 8008480:	464b      	mov	r3, r9
 8008482:	f7f8 f861 	bl	8000548 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f7 fea3 	bl	80001d8 <__aeabi_dsub>
 8008492:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008496:	f7f8 f857 	bl	8000548 <__aeabi_dmul>
 800849a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800849e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084a2:	4610      	mov	r0, r2
 80084a4:	4619      	mov	r1, r3
 80084a6:	f7f8 f84f 	bl	8000548 <__aeabi_dmul>
 80084aa:	a37b      	add	r3, pc, #492	; (adr r3, 8008698 <__ieee754_pow+0x6d0>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	f7f8 f848 	bl	8000548 <__aeabi_dmul>
 80084b8:	a379      	add	r3, pc, #484	; (adr r3, 80086a0 <__ieee754_pow+0x6d8>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f7 fe8d 	bl	80001dc <__adddf3>
 80084c2:	4622      	mov	r2, r4
 80084c4:	462b      	mov	r3, r5
 80084c6:	f7f8 f83f 	bl	8000548 <__aeabi_dmul>
 80084ca:	a377      	add	r3, pc, #476	; (adr r3, 80086a8 <__ieee754_pow+0x6e0>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f7 fe84 	bl	80001dc <__adddf3>
 80084d4:	4622      	mov	r2, r4
 80084d6:	462b      	mov	r3, r5
 80084d8:	f7f8 f836 	bl	8000548 <__aeabi_dmul>
 80084dc:	a374      	add	r3, pc, #464	; (adr r3, 80086b0 <__ieee754_pow+0x6e8>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fe7b 	bl	80001dc <__adddf3>
 80084e6:	4622      	mov	r2, r4
 80084e8:	462b      	mov	r3, r5
 80084ea:	f7f8 f82d 	bl	8000548 <__aeabi_dmul>
 80084ee:	a372      	add	r3, pc, #456	; (adr r3, 80086b8 <__ieee754_pow+0x6f0>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f7 fe72 	bl	80001dc <__adddf3>
 80084f8:	4622      	mov	r2, r4
 80084fa:	462b      	mov	r3, r5
 80084fc:	f7f8 f824 	bl	8000548 <__aeabi_dmul>
 8008500:	a36f      	add	r3, pc, #444	; (adr r3, 80086c0 <__ieee754_pow+0x6f8>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f7 fe69 	bl	80001dc <__adddf3>
 800850a:	4622      	mov	r2, r4
 800850c:	4606      	mov	r6, r0
 800850e:	460f      	mov	r7, r1
 8008510:	462b      	mov	r3, r5
 8008512:	4620      	mov	r0, r4
 8008514:	4629      	mov	r1, r5
 8008516:	f7f8 f817 	bl	8000548 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f8 f811 	bl	8000548 <__aeabi_dmul>
 8008526:	4642      	mov	r2, r8
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	464b      	mov	r3, r9
 800852e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008532:	f7f7 fe53 	bl	80001dc <__adddf3>
 8008536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800853a:	f7f8 f805 	bl	8000548 <__aeabi_dmul>
 800853e:	4622      	mov	r2, r4
 8008540:	462b      	mov	r3, r5
 8008542:	f7f7 fe4b 	bl	80001dc <__adddf3>
 8008546:	4642      	mov	r2, r8
 8008548:	4606      	mov	r6, r0
 800854a:	460f      	mov	r7, r1
 800854c:	464b      	mov	r3, r9
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f7 fff9 	bl	8000548 <__aeabi_dmul>
 8008556:	2200      	movs	r2, #0
 8008558:	4b68      	ldr	r3, [pc, #416]	; (80086fc <__ieee754_pow+0x734>)
 800855a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800855e:	f7f7 fe3d 	bl	80001dc <__adddf3>
 8008562:	4632      	mov	r2, r6
 8008564:	463b      	mov	r3, r7
 8008566:	f7f7 fe39 	bl	80001dc <__adddf3>
 800856a:	9802      	ldr	r0, [sp, #8]
 800856c:	460d      	mov	r5, r1
 800856e:	4604      	mov	r4, r0
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f7 ffe6 	bl	8000548 <__aeabi_dmul>
 800857c:	2200      	movs	r2, #0
 800857e:	4680      	mov	r8, r0
 8008580:	4689      	mov	r9, r1
 8008582:	4b5e      	ldr	r3, [pc, #376]	; (80086fc <__ieee754_pow+0x734>)
 8008584:	4620      	mov	r0, r4
 8008586:	4629      	mov	r1, r5
 8008588:	f7f7 fe26 	bl	80001d8 <__aeabi_dsub>
 800858c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008590:	f7f7 fe22 	bl	80001d8 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 fe1c 	bl	80001d8 <__aeabi_dsub>
 80085a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a4:	f7f7 ffd0 	bl	8000548 <__aeabi_dmul>
 80085a8:	4622      	mov	r2, r4
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	462b      	mov	r3, r5
 80085b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085b4:	f7f7 ffc8 	bl	8000548 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f7 fe0c 	bl	80001dc <__adddf3>
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f7 fe04 	bl	80001dc <__adddf3>
 80085d4:	9802      	ldr	r0, [sp, #8]
 80085d6:	a33c      	add	r3, pc, #240	; (adr r3, 80086c8 <__ieee754_pow+0x700>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	f7f7 ffb2 	bl	8000548 <__aeabi_dmul>
 80085e4:	4642      	mov	r2, r8
 80085e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085ea:	464b      	mov	r3, r9
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f7 fdf2 	bl	80001d8 <__aeabi_dsub>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4630      	mov	r0, r6
 80085fa:	4639      	mov	r1, r7
 80085fc:	f7f7 fdec 	bl	80001d8 <__aeabi_dsub>
 8008600:	a333      	add	r3, pc, #204	; (adr r3, 80086d0 <__ieee754_pow+0x708>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 ff9f 	bl	8000548 <__aeabi_dmul>
 800860a:	a333      	add	r3, pc, #204	; (adr r3, 80086d8 <__ieee754_pow+0x710>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	4606      	mov	r6, r0
 8008612:	460f      	mov	r7, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 ff96 	bl	8000548 <__aeabi_dmul>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f7 fdda 	bl	80001dc <__adddf3>
 8008628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862a:	4b35      	ldr	r3, [pc, #212]	; (8008700 <__ieee754_pow+0x738>)
 800862c:	4413      	add	r3, r2
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fdd3 	bl	80001dc <__adddf3>
 8008636:	4604      	mov	r4, r0
 8008638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863a:	460d      	mov	r5, r1
 800863c:	f7f7 ff1a 	bl	8000474 <__aeabi_i2d>
 8008640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008642:	4b30      	ldr	r3, [pc, #192]	; (8008704 <__ieee754_pow+0x73c>)
 8008644:	4413      	add	r3, r2
 8008646:	e9d3 8900 	ldrd	r8, r9, [r3]
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	4622      	mov	r2, r4
 8008650:	462b      	mov	r3, r5
 8008652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008656:	f7f7 fdc1 	bl	80001dc <__adddf3>
 800865a:	4642      	mov	r2, r8
 800865c:	464b      	mov	r3, r9
 800865e:	f7f7 fdbd 	bl	80001dc <__adddf3>
 8008662:	4632      	mov	r2, r6
 8008664:	463b      	mov	r3, r7
 8008666:	f7f7 fdb9 	bl	80001dc <__adddf3>
 800866a:	9802      	ldr	r0, [sp, #8]
 800866c:	4632      	mov	r2, r6
 800866e:	463b      	mov	r3, r7
 8008670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008674:	f7f7 fdb0 	bl	80001d8 <__aeabi_dsub>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	f7f7 fdac 	bl	80001d8 <__aeabi_dsub>
 8008680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008684:	e607      	b.n	8008296 <__ieee754_pow+0x2ce>
 8008686:	f04f 0a01 	mov.w	sl, #1
 800868a:	e6a5      	b.n	80083d8 <__ieee754_pow+0x410>
 800868c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80086e0 <__ieee754_pow+0x718>
 8008690:	e613      	b.n	80082ba <__ieee754_pow+0x2f2>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	4a454eef 	.word	0x4a454eef
 800869c:	3fca7e28 	.word	0x3fca7e28
 80086a0:	93c9db65 	.word	0x93c9db65
 80086a4:	3fcd864a 	.word	0x3fcd864a
 80086a8:	a91d4101 	.word	0xa91d4101
 80086ac:	3fd17460 	.word	0x3fd17460
 80086b0:	518f264d 	.word	0x518f264d
 80086b4:	3fd55555 	.word	0x3fd55555
 80086b8:	db6fabff 	.word	0xdb6fabff
 80086bc:	3fdb6db6 	.word	0x3fdb6db6
 80086c0:	33333303 	.word	0x33333303
 80086c4:	3fe33333 	.word	0x3fe33333
 80086c8:	e0000000 	.word	0xe0000000
 80086cc:	3feec709 	.word	0x3feec709
 80086d0:	dc3a03fd 	.word	0xdc3a03fd
 80086d4:	3feec709 	.word	0x3feec709
 80086d8:	145b01f5 	.word	0x145b01f5
 80086dc:	be3e2fe0 	.word	0xbe3e2fe0
 80086e0:	00000000 	.word	0x00000000
 80086e4:	3ff00000 	.word	0x3ff00000
 80086e8:	43400000 	.word	0x43400000
 80086ec:	0003988e 	.word	0x0003988e
 80086f0:	000bb679 	.word	0x000bb679
 80086f4:	08008e98 	.word	0x08008e98
 80086f8:	3ff00000 	.word	0x3ff00000
 80086fc:	40080000 	.word	0x40080000
 8008700:	08008eb8 	.word	0x08008eb8
 8008704:	08008ea8 	.word	0x08008ea8
 8008708:	a3b4      	add	r3, pc, #720	; (adr r3, 80089dc <__ieee754_pow+0xa14>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f7 fd63 	bl	80001dc <__adddf3>
 8008716:	4622      	mov	r2, r4
 8008718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800871c:	462b      	mov	r3, r5
 800871e:	4630      	mov	r0, r6
 8008720:	4639      	mov	r1, r7
 8008722:	f7f7 fd59 	bl	80001d8 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800872e:	f7f8 f99b 	bl	8000a68 <__aeabi_dcmpgt>
 8008732:	2800      	cmp	r0, #0
 8008734:	f47f adfe 	bne.w	8008334 <__ieee754_pow+0x36c>
 8008738:	4aa3      	ldr	r2, [pc, #652]	; (80089c8 <__ieee754_pow+0xa00>)
 800873a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800873e:	4293      	cmp	r3, r2
 8008740:	f340 810a 	ble.w	8008958 <__ieee754_pow+0x990>
 8008744:	151b      	asrs	r3, r3, #20
 8008746:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800874a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800874e:	fa4a f303 	asr.w	r3, sl, r3
 8008752:	445b      	add	r3, fp
 8008754:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008758:	4e9c      	ldr	r6, [pc, #624]	; (80089cc <__ieee754_pow+0xa04>)
 800875a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800875e:	4116      	asrs	r6, r2
 8008760:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008764:	2000      	movs	r0, #0
 8008766:	ea23 0106 	bic.w	r1, r3, r6
 800876a:	f1c2 0214 	rsb	r2, r2, #20
 800876e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008772:	fa4a fa02 	asr.w	sl, sl, r2
 8008776:	f1bb 0f00 	cmp.w	fp, #0
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	bfb8      	it	lt
 8008784:	f1ca 0a00 	rsblt	sl, sl, #0
 8008788:	f7f7 fd26 	bl	80001d8 <__aeabi_dsub>
 800878c:	e9cd 0100 	strd	r0, r1, [sp]
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008798:	f7f7 fd20 	bl	80001dc <__adddf3>
 800879c:	2000      	movs	r0, #0
 800879e:	a378      	add	r3, pc, #480	; (adr r3, 8008980 <__ieee754_pow+0x9b8>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	f7f7 fece 	bl	8000548 <__aeabi_dmul>
 80087ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	4620      	mov	r0, r4
 80087b6:	4629      	mov	r1, r5
 80087b8:	f7f7 fd0e 	bl	80001d8 <__aeabi_dsub>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 fd08 	bl	80001d8 <__aeabi_dsub>
 80087c8:	a36f      	add	r3, pc, #444	; (adr r3, 8008988 <__ieee754_pow+0x9c0>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 febb 	bl	8000548 <__aeabi_dmul>
 80087d2:	a36f      	add	r3, pc, #444	; (adr r3, 8008990 <__ieee754_pow+0x9c8>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	4680      	mov	r8, r0
 80087da:	4689      	mov	r9, r1
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f7 feb2 	bl	8000548 <__aeabi_dmul>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f7 fcf6 	bl	80001dc <__adddf3>
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f7 fcee 	bl	80001dc <__adddf3>
 8008800:	4632      	mov	r2, r6
 8008802:	463b      	mov	r3, r7
 8008804:	4680      	mov	r8, r0
 8008806:	4689      	mov	r9, r1
 8008808:	f7f7 fce6 	bl	80001d8 <__aeabi_dsub>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	f7f7 fce0 	bl	80001d8 <__aeabi_dsub>
 8008818:	4642      	mov	r2, r8
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	464b      	mov	r3, r9
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f7 fe90 	bl	8000548 <__aeabi_dmul>
 8008828:	a35b      	add	r3, pc, #364	; (adr r3, 8008998 <__ieee754_pow+0x9d0>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	f7f7 fe89 	bl	8000548 <__aeabi_dmul>
 8008836:	a35a      	add	r3, pc, #360	; (adr r3, 80089a0 <__ieee754_pow+0x9d8>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fccc 	bl	80001d8 <__aeabi_dsub>
 8008840:	4622      	mov	r2, r4
 8008842:	462b      	mov	r3, r5
 8008844:	f7f7 fe80 	bl	8000548 <__aeabi_dmul>
 8008848:	a357      	add	r3, pc, #348	; (adr r3, 80089a8 <__ieee754_pow+0x9e0>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fcc5 	bl	80001dc <__adddf3>
 8008852:	4622      	mov	r2, r4
 8008854:	462b      	mov	r3, r5
 8008856:	f7f7 fe77 	bl	8000548 <__aeabi_dmul>
 800885a:	a355      	add	r3, pc, #340	; (adr r3, 80089b0 <__ieee754_pow+0x9e8>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 fcba 	bl	80001d8 <__aeabi_dsub>
 8008864:	4622      	mov	r2, r4
 8008866:	462b      	mov	r3, r5
 8008868:	f7f7 fe6e 	bl	8000548 <__aeabi_dmul>
 800886c:	a352      	add	r3, pc, #328	; (adr r3, 80089b8 <__ieee754_pow+0x9f0>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fcb3 	bl	80001dc <__adddf3>
 8008876:	4622      	mov	r2, r4
 8008878:	462b      	mov	r3, r5
 800887a:	f7f7 fe65 	bl	8000548 <__aeabi_dmul>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	f7f7 fca7 	bl	80001d8 <__aeabi_dsub>
 800888a:	4604      	mov	r4, r0
 800888c:	460d      	mov	r5, r1
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 fe57 	bl	8000548 <__aeabi_dmul>
 800889a:	2200      	movs	r2, #0
 800889c:	e9cd 0100 	strd	r0, r1, [sp]
 80088a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f7 fc96 	bl	80001d8 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088b4:	f7f7 ff72 	bl	800079c <__aeabi_ddiv>
 80088b8:	4632      	mov	r2, r6
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	463b      	mov	r3, r7
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f7 fe40 	bl	8000548 <__aeabi_dmul>
 80088c8:	4632      	mov	r2, r6
 80088ca:	463b      	mov	r3, r7
 80088cc:	f7f7 fc86 	bl	80001dc <__adddf3>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fc7e 	bl	80001d8 <__aeabi_dsub>
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	f7f7 fc7a 	bl	80001d8 <__aeabi_dsub>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	2000      	movs	r0, #0
 80088ea:	4939      	ldr	r1, [pc, #228]	; (80089d0 <__ieee754_pow+0xa08>)
 80088ec:	f7f7 fc74 	bl	80001d8 <__aeabi_dsub>
 80088f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80088f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	da2f      	bge.n	800895e <__ieee754_pow+0x996>
 80088fe:	4650      	mov	r0, sl
 8008900:	ec43 2b10 	vmov	d0, r2, r3
 8008904:	f000 f9c0 	bl	8008c88 <scalbn>
 8008908:	ec51 0b10 	vmov	r0, r1, d0
 800890c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008910:	f7ff bbf1 	b.w	80080f6 <__ieee754_pow+0x12e>
 8008914:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <__ieee754_pow+0xa0c>)
 8008916:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800891a:	429e      	cmp	r6, r3
 800891c:	f77f af0c 	ble.w	8008738 <__ieee754_pow+0x770>
 8008920:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <__ieee754_pow+0xa10>)
 8008922:	440b      	add	r3, r1
 8008924:	4303      	orrs	r3, r0
 8008926:	d00b      	beq.n	8008940 <__ieee754_pow+0x978>
 8008928:	a325      	add	r3, pc, #148	; (adr r3, 80089c0 <__ieee754_pow+0x9f8>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008932:	f7f7 fe09 	bl	8000548 <__aeabi_dmul>
 8008936:	a322      	add	r3, pc, #136	; (adr r3, 80089c0 <__ieee754_pow+0x9f8>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7ff bbdb 	b.w	80080f6 <__ieee754_pow+0x12e>
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	f7f7 fc48 	bl	80001d8 <__aeabi_dsub>
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	f7f8 f882 	bl	8000a54 <__aeabi_dcmpge>
 8008950:	2800      	cmp	r0, #0
 8008952:	f43f aef1 	beq.w	8008738 <__ieee754_pow+0x770>
 8008956:	e7e7      	b.n	8008928 <__ieee754_pow+0x960>
 8008958:	f04f 0a00 	mov.w	sl, #0
 800895c:	e718      	b.n	8008790 <__ieee754_pow+0x7c8>
 800895e:	4621      	mov	r1, r4
 8008960:	e7d4      	b.n	800890c <__ieee754_pow+0x944>
 8008962:	2000      	movs	r0, #0
 8008964:	491a      	ldr	r1, [pc, #104]	; (80089d0 <__ieee754_pow+0xa08>)
 8008966:	f7ff bb8f 	b.w	8008088 <__ieee754_pow+0xc0>
 800896a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800896e:	f7ff bb8b 	b.w	8008088 <__ieee754_pow+0xc0>
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7ff bb87 	b.w	8008088 <__ieee754_pow+0xc0>
 800897a:	4693      	mov	fp, r2
 800897c:	f7ff bb98 	b.w	80080b0 <__ieee754_pow+0xe8>
 8008980:	00000000 	.word	0x00000000
 8008984:	3fe62e43 	.word	0x3fe62e43
 8008988:	fefa39ef 	.word	0xfefa39ef
 800898c:	3fe62e42 	.word	0x3fe62e42
 8008990:	0ca86c39 	.word	0x0ca86c39
 8008994:	be205c61 	.word	0xbe205c61
 8008998:	72bea4d0 	.word	0x72bea4d0
 800899c:	3e663769 	.word	0x3e663769
 80089a0:	c5d26bf1 	.word	0xc5d26bf1
 80089a4:	3ebbbd41 	.word	0x3ebbbd41
 80089a8:	af25de2c 	.word	0xaf25de2c
 80089ac:	3f11566a 	.word	0x3f11566a
 80089b0:	16bebd93 	.word	0x16bebd93
 80089b4:	3f66c16c 	.word	0x3f66c16c
 80089b8:	5555553e 	.word	0x5555553e
 80089bc:	3fc55555 	.word	0x3fc55555
 80089c0:	c2f8f359 	.word	0xc2f8f359
 80089c4:	01a56e1f 	.word	0x01a56e1f
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	000fffff 	.word	0x000fffff
 80089d0:	3ff00000 	.word	0x3ff00000
 80089d4:	4090cbff 	.word	0x4090cbff
 80089d8:	3f6f3400 	.word	0x3f6f3400
 80089dc:	652b82fe 	.word	0x652b82fe
 80089e0:	3c971547 	.word	0x3c971547

080089e4 <__ieee754_sqrt>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	4955      	ldr	r1, [pc, #340]	; (8008b40 <__ieee754_sqrt+0x15c>)
 80089ea:	ec55 4b10 	vmov	r4, r5, d0
 80089ee:	43a9      	bics	r1, r5
 80089f0:	462b      	mov	r3, r5
 80089f2:	462a      	mov	r2, r5
 80089f4:	d112      	bne.n	8008a1c <__ieee754_sqrt+0x38>
 80089f6:	ee10 2a10 	vmov	r2, s0
 80089fa:	ee10 0a10 	vmov	r0, s0
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f7 fda2 	bl	8000548 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fbe6 	bl	80001dc <__adddf3>
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	ec45 4b10 	vmov	d0, r4, r5
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	ee10 0a10 	vmov	r0, s0
 8008a22:	4621      	mov	r1, r4
 8008a24:	dc0f      	bgt.n	8008a46 <__ieee754_sqrt+0x62>
 8008a26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a2a:	4330      	orrs	r0, r6
 8008a2c:	d0f2      	beq.n	8008a14 <__ieee754_sqrt+0x30>
 8008a2e:	b155      	cbz	r5, 8008a46 <__ieee754_sqrt+0x62>
 8008a30:	ee10 2a10 	vmov	r2, s0
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fbce 	bl	80001d8 <__aeabi_dsub>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	f7f7 feac 	bl	800079c <__aeabi_ddiv>
 8008a44:	e7e4      	b.n	8008a10 <__ieee754_sqrt+0x2c>
 8008a46:	151b      	asrs	r3, r3, #20
 8008a48:	d073      	beq.n	8008b32 <__ieee754_sqrt+0x14e>
 8008a4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a4e:	07dd      	lsls	r5, r3, #31
 8008a50:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008a54:	bf48      	it	mi
 8008a56:	0fc8      	lsrmi	r0, r1, #31
 8008a58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008a5c:	bf44      	itt	mi
 8008a5e:	0049      	lslmi	r1, r1, #1
 8008a60:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008a64:	2500      	movs	r5, #0
 8008a66:	1058      	asrs	r0, r3, #1
 8008a68:	0fcb      	lsrs	r3, r1, #31
 8008a6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008a6e:	0049      	lsls	r1, r1, #1
 8008a70:	2316      	movs	r3, #22
 8008a72:	462c      	mov	r4, r5
 8008a74:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008a78:	19a7      	adds	r7, r4, r6
 8008a7a:	4297      	cmp	r7, r2
 8008a7c:	bfde      	ittt	le
 8008a7e:	19bc      	addle	r4, r7, r6
 8008a80:	1bd2      	suble	r2, r2, r7
 8008a82:	19ad      	addle	r5, r5, r6
 8008a84:	0fcf      	lsrs	r7, r1, #31
 8008a86:	3b01      	subs	r3, #1
 8008a88:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008a8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a94:	d1f0      	bne.n	8008a78 <__ieee754_sqrt+0x94>
 8008a96:	f04f 0c20 	mov.w	ip, #32
 8008a9a:	469e      	mov	lr, r3
 8008a9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008aa0:	42a2      	cmp	r2, r4
 8008aa2:	eb06 070e 	add.w	r7, r6, lr
 8008aa6:	dc02      	bgt.n	8008aae <__ieee754_sqrt+0xca>
 8008aa8:	d112      	bne.n	8008ad0 <__ieee754_sqrt+0xec>
 8008aaa:	428f      	cmp	r7, r1
 8008aac:	d810      	bhi.n	8008ad0 <__ieee754_sqrt+0xec>
 8008aae:	2f00      	cmp	r7, #0
 8008ab0:	eb07 0e06 	add.w	lr, r7, r6
 8008ab4:	da42      	bge.n	8008b3c <__ieee754_sqrt+0x158>
 8008ab6:	f1be 0f00 	cmp.w	lr, #0
 8008aba:	db3f      	blt.n	8008b3c <__ieee754_sqrt+0x158>
 8008abc:	f104 0801 	add.w	r8, r4, #1
 8008ac0:	1b12      	subs	r2, r2, r4
 8008ac2:	428f      	cmp	r7, r1
 8008ac4:	bf88      	it	hi
 8008ac6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008aca:	1bc9      	subs	r1, r1, r7
 8008acc:	4433      	add	r3, r6
 8008ace:	4644      	mov	r4, r8
 8008ad0:	0052      	lsls	r2, r2, #1
 8008ad2:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ad6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008ada:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ade:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ae2:	d1dd      	bne.n	8008aa0 <__ieee754_sqrt+0xbc>
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	d006      	beq.n	8008af6 <__ieee754_sqrt+0x112>
 8008ae8:	1c5c      	adds	r4, r3, #1
 8008aea:	bf13      	iteet	ne
 8008aec:	3301      	addne	r3, #1
 8008aee:	3501      	addeq	r5, #1
 8008af0:	4663      	moveq	r3, ip
 8008af2:	f023 0301 	bicne.w	r3, r3, #1
 8008af6:	106a      	asrs	r2, r5, #1
 8008af8:	085b      	lsrs	r3, r3, #1
 8008afa:	07e9      	lsls	r1, r5, #31
 8008afc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008b00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008b04:	bf48      	it	mi
 8008b06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008b0e:	461c      	mov	r4, r3
 8008b10:	e780      	b.n	8008a14 <__ieee754_sqrt+0x30>
 8008b12:	0aca      	lsrs	r2, r1, #11
 8008b14:	3815      	subs	r0, #21
 8008b16:	0549      	lsls	r1, r1, #21
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	d0fa      	beq.n	8008b12 <__ieee754_sqrt+0x12e>
 8008b1c:	02d6      	lsls	r6, r2, #11
 8008b1e:	d50a      	bpl.n	8008b36 <__ieee754_sqrt+0x152>
 8008b20:	f1c3 0420 	rsb	r4, r3, #32
 8008b24:	fa21 f404 	lsr.w	r4, r1, r4
 8008b28:	1e5d      	subs	r5, r3, #1
 8008b2a:	4099      	lsls	r1, r3
 8008b2c:	4322      	orrs	r2, r4
 8008b2e:	1b43      	subs	r3, r0, r5
 8008b30:	e78b      	b.n	8008a4a <__ieee754_sqrt+0x66>
 8008b32:	4618      	mov	r0, r3
 8008b34:	e7f0      	b.n	8008b18 <__ieee754_sqrt+0x134>
 8008b36:	0052      	lsls	r2, r2, #1
 8008b38:	3301      	adds	r3, #1
 8008b3a:	e7ef      	b.n	8008b1c <__ieee754_sqrt+0x138>
 8008b3c:	46a0      	mov	r8, r4
 8008b3e:	e7bf      	b.n	8008ac0 <__ieee754_sqrt+0xdc>
 8008b40:	7ff00000 	.word	0x7ff00000

08008b44 <fabs>:
 8008b44:	ec51 0b10 	vmov	r0, r1, d0
 8008b48:	ee10 2a10 	vmov	r2, s0
 8008b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b50:	ec43 2b10 	vmov	d0, r2, r3
 8008b54:	4770      	bx	lr

08008b56 <finite>:
 8008b56:	ee10 3a90 	vmov	r3, s1
 8008b5a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008b5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008b62:	0fc0      	lsrs	r0, r0, #31
 8008b64:	4770      	bx	lr

08008b66 <matherr>:
 8008b66:	2000      	movs	r0, #0
 8008b68:	4770      	bx	lr
 8008b6a:	0000      	movs	r0, r0
 8008b6c:	0000      	movs	r0, r0
	...

08008b70 <nan>:
 8008b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b78 <nan+0x8>
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	00000000 	.word	0x00000000
 8008b7c:	7ff80000 	.word	0x7ff80000

08008b80 <rint>:
 8008b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b82:	ec51 0b10 	vmov	r0, r1, d0
 8008b86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b8a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008b8e:	2e13      	cmp	r6, #19
 8008b90:	460b      	mov	r3, r1
 8008b92:	ee10 4a10 	vmov	r4, s0
 8008b96:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008b9a:	dc56      	bgt.n	8008c4a <rint+0xca>
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	da2b      	bge.n	8008bf8 <rint+0x78>
 8008ba0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008ba4:	4302      	orrs	r2, r0
 8008ba6:	d023      	beq.n	8008bf0 <rint+0x70>
 8008ba8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008bac:	4302      	orrs	r2, r0
 8008bae:	4254      	negs	r4, r2
 8008bb0:	4314      	orrs	r4, r2
 8008bb2:	0c4b      	lsrs	r3, r1, #17
 8008bb4:	0b24      	lsrs	r4, r4, #12
 8008bb6:	045b      	lsls	r3, r3, #17
 8008bb8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008bbc:	ea44 0103 	orr.w	r1, r4, r3
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	492f      	ldr	r1, [pc, #188]	; (8008c80 <rint+0x100>)
 8008bc4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008bc8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008bcc:	4602      	mov	r2, r0
 8008bce:	4639      	mov	r1, r7
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7f7 fb03 	bl	80001dc <__adddf3>
 8008bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bda:	463b      	mov	r3, r7
 8008bdc:	4632      	mov	r2, r6
 8008bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be2:	f7f7 faf9 	bl	80001d8 <__aeabi_dsub>
 8008be6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008bee:	4639      	mov	r1, r7
 8008bf0:	ec41 0b10 	vmov	d0, r0, r1
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf8:	4a22      	ldr	r2, [pc, #136]	; (8008c84 <rint+0x104>)
 8008bfa:	4132      	asrs	r2, r6
 8008bfc:	ea01 0702 	and.w	r7, r1, r2
 8008c00:	4307      	orrs	r7, r0
 8008c02:	d0f5      	beq.n	8008bf0 <rint+0x70>
 8008c04:	0852      	lsrs	r2, r2, #1
 8008c06:	4011      	ands	r1, r2
 8008c08:	430c      	orrs	r4, r1
 8008c0a:	d00b      	beq.n	8008c24 <rint+0xa4>
 8008c0c:	ea23 0202 	bic.w	r2, r3, r2
 8008c10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c14:	2e13      	cmp	r6, #19
 8008c16:	fa43 f306 	asr.w	r3, r3, r6
 8008c1a:	bf0c      	ite	eq
 8008c1c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008c20:	2400      	movne	r4, #0
 8008c22:	4313      	orrs	r3, r2
 8008c24:	4916      	ldr	r1, [pc, #88]	; (8008c80 <rint+0x100>)
 8008c26:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c30:	4620      	mov	r0, r4
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7f7 fad2 	bl	80001dc <__adddf3>
 8008c38:	e9cd 0100 	strd	r0, r1, [sp]
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	462b      	mov	r3, r5
 8008c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c44:	f7f7 fac8 	bl	80001d8 <__aeabi_dsub>
 8008c48:	e7d2      	b.n	8008bf0 <rint+0x70>
 8008c4a:	2e33      	cmp	r6, #51	; 0x33
 8008c4c:	dd07      	ble.n	8008c5e <rint+0xde>
 8008c4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008c52:	d1cd      	bne.n	8008bf0 <rint+0x70>
 8008c54:	ee10 2a10 	vmov	r2, s0
 8008c58:	f7f7 fac0 	bl	80001dc <__adddf3>
 8008c5c:	e7c8      	b.n	8008bf0 <rint+0x70>
 8008c5e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	40f2      	lsrs	r2, r6
 8008c68:	4210      	tst	r0, r2
 8008c6a:	d0c1      	beq.n	8008bf0 <rint+0x70>
 8008c6c:	0852      	lsrs	r2, r2, #1
 8008c6e:	4210      	tst	r0, r2
 8008c70:	bf1f      	itttt	ne
 8008c72:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008c76:	ea20 0202 	bicne.w	r2, r0, r2
 8008c7a:	4134      	asrne	r4, r6
 8008c7c:	4314      	orrne	r4, r2
 8008c7e:	e7d1      	b.n	8008c24 <rint+0xa4>
 8008c80:	08008ec8 	.word	0x08008ec8
 8008c84:	000fffff 	.word	0x000fffff

08008c88 <scalbn>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	ec55 4b10 	vmov	r4, r5, d0
 8008c8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c92:	4606      	mov	r6, r0
 8008c94:	462b      	mov	r3, r5
 8008c96:	b9aa      	cbnz	r2, 8008cc4 <scalbn+0x3c>
 8008c98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c9c:	4323      	orrs	r3, r4
 8008c9e:	d03b      	beq.n	8008d18 <scalbn+0x90>
 8008ca0:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <scalbn+0xe0>)
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	ee10 0a10 	vmov	r0, s0
 8008caa:	f7f7 fc4d 	bl	8000548 <__aeabi_dmul>
 8008cae:	4b2f      	ldr	r3, [pc, #188]	; (8008d6c <scalbn+0xe4>)
 8008cb0:	429e      	cmp	r6, r3
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	da12      	bge.n	8008cde <scalbn+0x56>
 8008cb8:	a327      	add	r3, pc, #156	; (adr r3, 8008d58 <scalbn+0xd0>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fc43 	bl	8000548 <__aeabi_dmul>
 8008cc2:	e009      	b.n	8008cd8 <scalbn+0x50>
 8008cc4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008cc8:	428a      	cmp	r2, r1
 8008cca:	d10c      	bne.n	8008ce6 <scalbn+0x5e>
 8008ccc:	ee10 2a10 	vmov	r2, s0
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	f7f7 fa82 	bl	80001dc <__adddf3>
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	e01c      	b.n	8008d18 <scalbn+0x90>
 8008cde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	3a36      	subs	r2, #54	; 0x36
 8008ce6:	4432      	add	r2, r6
 8008ce8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008cec:	428a      	cmp	r2, r1
 8008cee:	dd0b      	ble.n	8008d08 <scalbn+0x80>
 8008cf0:	ec45 4b11 	vmov	d1, r4, r5
 8008cf4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008d60 <scalbn+0xd8>
 8008cf8:	f000 f83c 	bl	8008d74 <copysign>
 8008cfc:	a318      	add	r3, pc, #96	; (adr r3, 8008d60 <scalbn+0xd8>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	ec51 0b10 	vmov	r0, r1, d0
 8008d06:	e7da      	b.n	8008cbe <scalbn+0x36>
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	dd08      	ble.n	8008d1e <scalbn+0x96>
 8008d0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d18:	ec45 4b10 	vmov	d0, r4, r5
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
 8008d1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d22:	da0d      	bge.n	8008d40 <scalbn+0xb8>
 8008d24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d28:	429e      	cmp	r6, r3
 8008d2a:	ec45 4b11 	vmov	d1, r4, r5
 8008d2e:	dce1      	bgt.n	8008cf4 <scalbn+0x6c>
 8008d30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008d58 <scalbn+0xd0>
 8008d34:	f000 f81e 	bl	8008d74 <copysign>
 8008d38:	a307      	add	r3, pc, #28	; (adr r3, 8008d58 <scalbn+0xd0>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	e7e0      	b.n	8008d02 <scalbn+0x7a>
 8008d40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d44:	3236      	adds	r2, #54	; 0x36
 8008d46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	2200      	movs	r2, #0
 8008d54:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <scalbn+0xe8>)
 8008d56:	e7b2      	b.n	8008cbe <scalbn+0x36>
 8008d58:	c2f8f359 	.word	0xc2f8f359
 8008d5c:	01a56e1f 	.word	0x01a56e1f
 8008d60:	8800759c 	.word	0x8800759c
 8008d64:	7e37e43c 	.word	0x7e37e43c
 8008d68:	43500000 	.word	0x43500000
 8008d6c:	ffff3cb0 	.word	0xffff3cb0
 8008d70:	3c900000 	.word	0x3c900000

08008d74 <copysign>:
 8008d74:	ec51 0b10 	vmov	r0, r1, d0
 8008d78:	ee11 0a90 	vmov	r0, s3
 8008d7c:	ee10 2a10 	vmov	r2, s0
 8008d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008d88:	ea41 0300 	orr.w	r3, r1, r0
 8008d8c:	ec43 2b10 	vmov	d0, r2, r3
 8008d90:	4770      	bx	lr
	...

08008d94 <_init>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr

08008da0 <_fini>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	bf00      	nop
 8008da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da6:	bc08      	pop	{r3}
 8008da8:	469e      	mov	lr, r3
 8008daa:	4770      	bx	lr
